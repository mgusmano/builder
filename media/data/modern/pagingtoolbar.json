{
  "xtype": "pagingtoolbar",
  "name": "Ext.toolbar.Paging",
  "description": "As the number of records increases, the time required for the browser to render them increases.\nPaging is used to reduce the amount of data exchanged with the client.\nNote: if there are more records/rows than can be viewed in the available screen area,\nvertical scrollbars will be added.\n\nPaging is typically handled on the server side (see exception below). The client sends parameters\nto the server side, which the server needs to interpret and then respond with the appropriate\ndata.\n\nExt.toolbar.Paging is a specialized toolbar that is bound to a {@link Ext.data.Store}\nand provides automatic paging control. This Component {@link Ext.data.Store#method-load load}s\nblocks of data into the {@link #store} by passing parameters used for paging criteria.\n\nNote: The {@link #store} specified must support paging as defined by `{@link Ext.data.Store}`.\nIn particular, this means that `{@link Ext.data.ChainedStore}` is not supported.\n\n{@img Ext.toolbar.Paging/Ext.toolbar.Paging.png Ext.toolbar.Paging component}\n\nPaging Toolbar is typically used as one of the Grid's toolbars:\n\n    var itemsPerPage = 2; // set the number of items you want per page\n\n    Ext.create('Ext.data.Store', {\n        id: 'simpsonsStore',\n        autoLoad: false,\n        fields: ['name', 'email', 'phone'],\n        pageSize: itemsPerPage, // items per page\n        proxy: {\n            type: 'ajax',\n            // url that will load data with respect to start and limit params\n            url: 'pagingstore.js',\n            reader: {\n                type: 'json',\n                rootProperty: 'items',\n                totalProperty: 'total'\n            }\n        }\n    });\n\n    // specify segment of data you want to load using params\n    store.load({\n        params: {\n            start: 0,\n            limit: itemsPerPage\n        }\n    });\n\n    Ext.create('Ext.grid.Panel', {\n        title: 'Simpsons',\n        width: 400,\n        height: 125,\n        renderTo: Ext.getBody(),\n\n        store: 'simpsonsStore',\n\n        columns: [{\n            text: 'Name',\n            dataIndex: 'name'\n        }, {\n            text: 'Email',\n            dataIndex: 'email',\n            flex: 1\n        }, {\n            text: 'Phone',\n            dataIndex: 'phone'\n        }],\n\n        bbar: {\n            xtype: 'pagingtoolbar',\n            displayInfo: true\n        }\n    });\n\nTo use paging, you need to set a pageSize configuration on the Store, and pass the paging\nrequirements to the server when the store is first loaded.\n\n    store.load({\n        params: {\n            // specify params for the first page load if using paging\n            start: 0,\n            limit: myPageSize,\n            // other params\n            foo:   'bar'\n        }\n    });\n\nIf using {@link Ext.data.Store#autoLoad store's autoLoad} configuration:\n\n    var myStore = Ext.create('Ext.data.Store', {\n        autoLoad: {start: 0, limit: 25},\n        ...\n    });\n\nThe packet sent back from the server would have this form:\n\n    {\n        \"success\": true,\n        \"results\": 2000,\n        \"items\": [ // ***Note:** this must be an Array\n            { \"id\":  1, \"name\": \"Bill\", \"occupation\": \"Gardener\" },\n            { \"id\":  2, \"name\":  \"Ben\", \"occupation\": \"Horticulturalist\" },\n            ...\n            { \"id\": 25, \"name\":  \"Sue\", \"occupation\": \"Botanist\" }\n        ]\n    }\n\n## Paging with Local Data\n\nPaging can also be accomplished with local data using extensions:\n\n  - [Ext.ux.data.PagingStore][1]\n  - Paging Memory Proxy (examples/ux/PagingMemoryProxy.js)\n\n   [1]: http://sencha.com/forum/showthread.php?t=71532\n",
  "extends": "Ext.toolbar.Toolbar",
  "extended": "Ext.toolbar.Toolbar,Ext.container.Container,Ext.Component,Ext.Base",
  "primaryCollection": "na",
  "primaryCollectionBaseType": "na",
  "numConfigs": 145,
  "numMethods": 411,
  "numEvents": 38,
  "configs": [
    {
      "name": "actions",
      "type": "Object",
      "defaultValue": "null",
      "description": "An object containing properties which define named {@link Ext.Action actions}\nfor this container and any descendant components.\n\nAn Action encapsulates a shareable, reusable set of properties which define a\n\"clickable\" UI component such as a {@link Ext.button.Button button} or\n{@link Ext.menu.Item menu item}, or {@link Ext.panel.Panel#tools panel header tool},\nor an {@link Ext.grid.column.Action ActionColumn item}\n\nAn Action, or more conveniently, the *name* of an action prefixed with `'@'`\nmay be used as a config object for creating child components which use a `handler`\nconfig property to reference a Controller method to invoke when the component is\nclicked.\n\nThe property name is the action name, which may then be used as a child item\nconfiguration in an {@link Ext.container.Container#cfg!items items} configuration in\nany descendant component such as a toolbar or a menu, or in a\n{@link Ext.panel.Panel#tools tools} configuration of a Panel.\n\nThe property value is a configuration object for any clickable component.\n\nSee the {@link Ext.Action} class for an example of reusable Actions.\n"
    },
    {
      "name": "activeChildTabIndex",
      "type": "Number",
      "defaultValue": "0",
      "description": "DOM tabIndex attribute to set on the\nactive Focusable child of this container when using the \"Roaming tabindex\"\ntechnique.\n"
    },
    {
      "name": "activeCounter",
      "type": "Number",
      "defaultValue": "0",
      "description": "An incrementing numeric counter indicating activation\nindex for use by the {@link #zIndexManager} to sort its stack.\n"
    },
    {
      "name": "activeItem",
      "type": "String/Number",
      "description": "A string component id or the numeric index of the component that should be\ninitially activated within the container's layout on render.  For example,\nactiveItem: 'item-1' or activeItem: 0 (index 0 = the first item in the\ncontainer's collection).  activeItem only applies to layout styles that can\ndisplay items one at a time (like {@link Ext.layout.container.Card} and\n{@link Ext.layout.container.Fit}).\n"
    },
    {
      "name": "afterPageText",
      "type": "String",
      "defaultValue": "'of {0}'",
      "description": "Customizable piece of the default paging text. Note that this string is formatted using\n{0} as a token that is replaced by the number of total pages. This token should be preserved\nwhen overriding this string if showing the total page count is desired.\n"
    },
    {
      "name": "alignOnScroll",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "By default, when the {@link Ext.Component#alignTo alignTo} method is called, a floating\ncomponent will scroll to keep aligned with the anchoring element if the anchoring element\nis part of the scroll.\n\nIf this is not necessary, and the `alignTo` is a one-off operation then set this config\nto `false`.\n"
    },
    {
      "name": "alignTarget",
      "type": "String",
      "defaultValue": "null",
      "description": "A Component or Element by which to position this component according to the\n{@link #defaultAlign}. Defaults to the owning Container.\n\n*Only applicable if this component is {@link #cfg-floating}*\n\n*Used upon first show*.\n"
    },
    {
      "name": "allowFocusingDisabledChildren",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Set this to `true`\nto enable focusing disabled child items via keyboard.\n"
    },
    {
      "name": "alwaysOnTop",
      "type": "Boolean/Number",
      "defaultValue": "false",
      "description": "A flag indicating that this component should be\non the top of the z-index stack for use by the {@link #zIndexManager} to sort its stack.\n\nThis may be a positive number to prioritize the ordering of multiple visible\nalways on top components.\n\nThis may be set to a *negative* number to prioritize a component to the *bottom*\nof the z-index stack.\n"
    },
    {
      "name": "anchor",
      "type": "String",
      "description": "\nThis configuration option is to be applied to **child `items`** of a container managed\nby an {@link Ext.layout.container.Anchor Anchor Layout}.\n\nThis value is what tells the layout how an item should be anchored to the container. `items`\nadded to an AnchorLayout accept an anchoring-specific config property of **anchor**\nwhich is a string containing two values: the horizontal anchor value and the vertical anchor\nvalue (for example, '100% 50%'). The following types of anchor values are supported:\n\n- **Percentage** : Any value between 1 and 100, expressed as a percentage.\n\n  The first anchor is the percentage width that the item should take up within the container,\n  and the second is the percentage height.  For example:\n\n      // two values specified\n      anchor: '100% 50%' // render item complete width of the container and\n                         // 1/2 height of the container\n      // one value specified\n      anchor: '100%'     // the width value; the height will default to auto\n\n- **Offsets** : Any positive or negative integer value.\n\n  This is a raw adjustment where the first anchor is the offset from the right edge\n  of the container, and the second is the offset from the bottom edge. For example:\n\n      // two values specified\n      anchor: '-50 -100' // render item the complete width of the container\n                         // minus 50 pixels and\n                         // the complete height minus 100 pixels.\n      // one value specified\n      anchor: '-50'      // anchor value is assumed to be the right offset value\n                         // bottom offset will default to 0\n\n- **Sides** : Valid values are `right` (or `r`) and `bottom` (or `b`).\n\n  Either the container must have a fixed size or an anchorSize config value defined\n  at render time in order for these to have any effect.\n\n- **Mixed** :\n\n  Anchor values can also be mixed as needed.  For example, to render the width offset\n  from the container right edge by 50 pixels and 75% of the container's height use:\n\n      anchor:   '-50 75%'\n"
    },
    {
      "name": "anchorSize",
      "type": "Number/Object",
      "description": "Defines the anchoring size of container.\nEither a number to define the width of the container or an object\nwith `{@link #cfg!width width}` and `{@link #cfg!height height}` fields.\n"
    },
    {
      "name": "animateShadow",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to animate the shadow along with the component while the component is animating.\nBy default the shadow is hidden while the component is animating\n"
    },
    {
      "name": "ariaAttributes",
      "type": "Object",
      "defaultValue": "null",
      "description": "An object containing ARIA attributes to be set\non this Component's ARIA element. Use this to set the attributes that cannot be\ndetermined by the Component's state, such as `aria-live`, `aria-flowto`, etc.\n\n**Note** that this config is only meaningful at the Component rendering time,\nand setting it after that will do nothing.\n"
    },
    {
      "name": "ariaDescribedBy",
      "type": "String",
      "description": "DOM selector for a child element that is to be used\nas description for this Component, set in `aria-describedby` attribute.\nThe selector works the same way as {@link #ariaLabelledBy}.\n"
    },
    {
      "name": "ariaLabel",
      "type": "String",
      "description": "ARIA label for this Component. It is best to use\n{@link #ariaLabelledBy} option instead, because screen readers prefer\n`aria-labelledby` attribute to `aria-label`. {@link #ariaLabel} and\n{@link #ariaLabelledBy} config options are mutually exclusive.\n"
    },
    {
      "name": "ariaLabelledBy",
      "type": "String",
      "description": "DOM selector for a child element that is to be used\nas label for this Component, set in `aria-labelledby` attribute.\nIf the selector is by `{@link #cfg!id #id}`, the label element can be any existing element,\nnot necessarily a child of the main Component element.\n\n{@link #ariaLabelledBy} and {@link #ariaLabel} config options are\nmutually exclusive, and `{@link #cfg!ariaLabelledBy ariaLabelledBy}` has the higher precedence.\n"
    },
    {
      "name": "autoDestroy",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "If true the container will automatically destroy any contained component that is removed\nfrom it, else destruction must be handled manually.\n"
    },
    {
      "name": "autoEl",
      "type": "String/Object",
      "description": "A tag name or {@link Ext.dom.Helper DomHelper} spec used to create the {@link #getEl Element}\nwhich will encapsulate this Component.\n\nYou do not normally need to specify this. For the base classes {@link Ext.Component} and\n{@link Ext.container.Container}, this defaults to **'div'**. The more complex Sencha classes\nuse a more complex DOM structure specified by their own {@link #cfg-renderTpl}s.\n\nThis is intended to allow the developer to create application-specific utility Components\nencapsulated by different DOM elements. Example usage:\n\n    {\n        xtype: 'component',\n        autoEl: {\n            tag: 'img',\n            src: 'http://www.example.com/example.jpg'\n        }\n    }, {\n        xtype: 'component',\n        autoEl: {\n            tag: 'blockquote',\n            html: 'autoEl is cool!'\n        }\n    }, {\n        xtype: 'container',\n        autoEl: 'ul',\n        cls: 'ux-unordered-list',\n        items: {\n            xtype: 'component',\n            autoEl: 'li',\n            html: 'First list item'\n        }\n    }\n"
    },
    {
      "name": "autoRender",
      "type": "Boolean/String/HTMLElement/Ext.dom.Element",
      "defaultValue": "false",
      "description": "This config is intended mainly for non-{@link #cfg-floating} Components which may or may not\nbe shown. Instead of using {@link #renderTo} in the configuration, and rendering upon\nconstruction, this allows a Component to render itself upon first\n_{@link Ext.Component#method-show show}_. If {@link #cfg-floating} is `true`, the value\nof this config is omitted as if it is `true`.\n\nSpecify as `true` to have this Component render to the document body upon first show.\n\nSpecify as an element, or the ID of an element to have this Component render to a specific\nelement upon first show.\n"
    },
    {
      "name": "autoScroll",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to use overflow:'auto' on the components layout element and show scroll bars\nautomatically when necessary, `false` to clip any overflowing content.\n\nThis should not be combined with {@link #overflowX} or  {@link #overflowY}.\n"
    },
    {
      "name": "autoShow",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to automatically show the component upon creation. This config option may only be used\nfor {@link #cfg-floating} components or components that use {@link #autoRender}.\n"
    },
    {
      "name": "baseCls",
      "type": "String",
      "defaultValue": "Ext.baseCSSPrefix + 'container'",
      "description": "The base CSS class to apply to this component's element. This will also be prepended\nto elements within this component like Panel's body will get a class `x-panel-body`.\nThis means that if you create a subclass of Panel, and you want it to get all the Panels\nstyling for the element and the body, you leave the `{@link #cfg!baseCls baseCls}` `x-panel` and use\n`{@link #cfg!componentCls componentCls}` to add specific styling for this component.\n"
    },
    {
      "name": "beforePageText",
      "type": "String",
      "defaultValue": "'Page'",
      "description": "The text displayed before the input item.\n"
    },
    {
      "name": "bind",
      "type": "Object/String",
      "defaultValue": "null",
      "description": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `title` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n\n**Note:** If  bind is passed as a string, it will use the\n{@link Ext.Component#property-defaultBindProperty} for the binding.\n"
    },
    {
      "name": "border",
      "type": "Number/String/Boolean",
      "description": "Specifies the border size for this component. The border can be a single numeric value\nto apply to all sides or it can be a CSS style specification for each style,\nfor example: '10 5 3 10' (top, right, bottom, left).\n\nFor components that have no border by default, setting this won't make the border appear\nby itself. You also need to specify border color and style:\n\n    border: 5,\n    style: {\n        borderColor: 'red',\n        borderStyle: 'solid'\n    }\n\nTo turn off the border, use `border: false`.\n"
    },
    {
      "name": "bubbleEvents",
      "type": "String[]",
      "description": "An array of events that, when fired, should be bubbled to any parent container.\nSee {@link Ext.util.Observable#enableBubble}.\n"
    },
    {
      "name": "childEls",
      "type": "Object/String[]/Object[]",
      "defaultValue": "{}",
      "description": "The canonical form of `{@link #cfg!childEls childEls}` is an object keyed by child's property name\nwith values that are objects with the following properties.\n\n- `{@link #cfg!itemId itemId}` - The id to combine with the Component's id that is the id of the\n  child element.\n- `{@link #cfg!id id}` - The id of the child element.\n- `leaf` - Set to `true` to ignore content when scanning for childEls. This\n should be set on things like the generated content for an `{@link Ext.view.View}`.\n- `select`: A selector that will be passed to {@link Ext.dom.Element#method-select}.\n- `selectNode`: A selector that will be passed to\n{@link Ext.dom.Element#method-selectNode}.\n\nFor example:\n\n     childEls: {\n         button: true,\n         buttonText: 'text',\n         buttonImage: {\n             itemId: 'image'\n         }\n     }\n\nThe above is translated into the following complete form:\n\n     childEls: {\n         button: {\n             name: 'button',\n             itemId: 'button'\n         },\n         buttonText: {\n             name: 'buttonText',\n             itemId: 'text'\n         },\n         buttonImage: {\n             name: 'buttonImage',\n             itemId: 'image'\n         }\n     }\n\nThe above can be provided as an array like so:\n\n     childEls: [\n         'button',\n         { name: 'buttonText', itemId: 'text' },\n         { name: 'buttonImage', itemId: 'image' }\n     }\n\nFor example, a Component which renders a title and body text:\n\n    @example\n    Ext.create('Ext.Component', {\n        renderTo: Ext.getBody(),\n        renderTpl: [\n            '<h1 id=\"{id}-title\" data-ref=\"title\">{title}</h1>',\n            '<p>{msg}</p>',\n        ],\n        renderData: {\n            title: \"Error\",\n            msg: \"Something went wrong\"\n        },\n        childEls: [\"title\"],\n        listeners: {\n            afterrender: function(cmp){\n                // After rendering the component will have a title property\n                cmp.title.setStyle({color: \"red\"});\n            }\n        }\n    });\n\n**Note:** `childEl`s in the {@link Ext.Component#cfg-renderTpl renderTpl}\nmust be referenced in a **data-ref** attribute.  Notice in the above example\nthat the \"title\" `childEl` is set in the `{@link #cfg!renderTpl renderTpl}` using\n**data-ref=\"title\"**.\n\nWhen using `select`, the property will be an instance of {@link Ext.CompositeElement}.\nIn all other cases, the property will be an {@link Ext.dom.Element} or `null`\nif not found.\n\nCare should be taken when using `select` or `selectNode` to find child elements.\nThe following issues should be considered:\n\n- Performance: using selectors can be 10x slower than id lookup.\n- Over-selecting: selectors are applied after the DOM elements for all children\n  have been rendered, so selectors can match elements from child components\n  (including nested versions of the same component) accidentally.\n\nThis above issues are most important when using `select` since it returns multiple\nelements.\n"
    },
    {
      "name": "cls",
      "type": "String/String[]",
      "defaultValue": "''",
      "description": "An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings.\nThis can be useful for adding customized styles to the component or any of its children\nusing standard CSS rules.\n"
    },
    {
      "name": "columnWidth",
      "type": "Number",
      "description": "Defines the column width inside {@link Ext.layout.container.Column column layout}.\n\nThe columnWidth property is always evaluated as a percentage and must be a decimal value\ngreater than 0 and less than 1 (e.g., .25). See the description at the top of\n{@link Ext.layout.container.Column column layout} for additional usage details when combining\nwidth and columnWidth configs within the layout.\n"
    },
    {
      "name": "componentCls",
      "type": "String",
      "description": "CSS Class to be added to a components root level element to give distinction to it\nvia styling.\n"
    },
    {
      "name": "componentLayout",
      "type": "String/Object",
      "defaultValue": "'autocomponent'",
      "description": "The sizing and positioning of a Component's internal Elements is the responsibility\nof the Component's layout manager which sizes a Component's internal structure in response\nto the Component being sized.\n\nGenerally, developers will not use this configuration as all provided Components which need\ntheir internal elements sizing (Such as {@link Ext.form.field.Base input fields}) come with\ntheir own componentLayout managers.\n\nThe {@link Ext.layout.container.Auto default layout manager} will be used on instances of the\nbase Ext.Component class which simply sizes the Component's encapsulating element to the\nheight and width specified in the {@link #setSize} method.\n"
    },
    {
      "name": "constrain",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "True to constrain this Components within its containing element, false to allow it to fall\noutside of its containing element. By default this Component will be rendered to\n`document.body`. To render and constrain this Component within another element specify\n{@link Ext.Component#renderTo renderTo}.\n"
    },
    {
      "name": "constraintInsets",
      "type": "Object/String",
      "description": "An object or a string (in TRBL order) specifying insets from the configured\n{@link #constrainTo constrain region} within which this component must be constrained\nwhen positioning or sizing. Example:\n\n    constraintInsets: '10 10 10 10' // Constrain with 10px insets from parent\n"
    },
    {
      "name": "constrainTo",
      "type": "Ext.util.Region/Ext.dom.Element",
      "description": "A {@link Ext.util.Region Region} (or an element from which a Region measurement will be read)\nwhich is used to constrain the component. Only applies when the component is floating.\n"
    },
    {
      "name": "contentEl",
      "type": "String",
      "description": "Specify an existing HTML element, or the `{@link #cfg!id id}` of an existing HTML element to use as the\ncontent for this component.\n\nThis config option is used to take an existing HTML element and place it in the layout\nelement of a new component (it simply moves the specified DOM element _after the Component\nis rendered_ to use as the content.\n\n**Notes:**\n\nThe specified HTML element is appended to the layout element of the component _after any\nconfigured {@link #html HTML} has been inserted_, and so the document will not contain\nthis element at the time the {@link #event-render} event is fired.\n\nThe specified HTML element used will not participate in any\n**`{@link Ext.container.Container#layout layout}`** scheme that the Component may use.\nIt is just HTML. Layouts operate on child\n**`{@link Ext.container.Container#cfg-items items}`**.\n\nAdd either the `x-hidden` or the `x-hidden-display` CSS class to prevent a brief flicker\nof the content before it is rendered to the panel.\n"
    },
    {
      "name": "controller",
      "type": "String/Object/Ext.app.ViewController",
      "defaultValue": "null",
      "description": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n"
    },
    {
      "name": "data",
      "type": "Object",
      "defaultValue": "null",
      "description": "The initial set of data to apply to the `{@link #tpl}` to update the content\narea of the Component.\n"
    },
    {
      "name": "defaultAlign",
      "type": "String",
      "defaultValue": "'c-c'",
      "description": "The default {@link Ext.util.Positionable#getAlignToXY Ext.dom.Element#getAlignToXY} anchor\nposition value for this component relative to its {@link #alignTarget}\n(which defaults to its owning Container).\n\n_Only applicable if this component is {@link #cfg-floating}_\n\n*Used upon first show*.\n"
    },
    {
      "name": "defaultButtonUI",
      "type": "String",
      "defaultValue": "'default-toolbar'",
      "description": "A default {@link Ext.Component#ui ui} to use for {@link Ext.button.Button Button} items. This is a quick and simple\nway to change the look of all child {@link Ext.button.Button Buttons}.\n\nIf there is no value for defaultButtonUI, the button's {@link Ext.Component#ui ui} value will get `-toolbar`\nappended so the {@link Ext.button.Button Button} has a different look when it's a child of a {@link Ext.toolbar.Toolbar Toolbar}.\nTo prevent this and have the same look as buttons outside of a toolbar, you can provide a string value to the defaultButtonUI:\n\n    Ext.create('Ext.panel.Panel', {\n        renderTo    : document.body,\n        width       : 300,\n        title       : 'Panel',\n        html        : 'Some Body',\n        dockedItems : [\n            {\n                xtype           : 'toolbar',\n                dock            : 'top',\n                defaultButtonUI : 'default',\n                items           : [\n                    {\n                        text : 'Save'\n                    },\n                    {\n                        text : 'Remove'\n                    }\n                ]\n            }\n        ]\n    });\n"
    },
    {
      "name": "defaultFieldUI",
      "type": "String",
      "defaultValue": "'default'",
      "description": "Default UI for form field items.\n"
    },
    {
      "name": "defaultFocus",
      "type": "String",
      "description": "\nSpecifies a child Component to receive focus when this Container's {@link #method-focus}\nmethod is called. Should be a valid {@link Ext.ComponentQuery query} selector.\n"
    },
    {
      "name": "defaultFooterButtonUI",
      "type": "String",
      "defaultValue": "'default'",
      "description": "Default UI for Buttons if the toolbar has a UI of 'footer'\n"
    },
    {
      "name": "defaultFooterFieldUI",
      "type": "String",
      "defaultValue": "'default'",
      "description": "Default UI for Form Fields if the toolbar has a UI of 'footer'\n"
    },
    {
      "name": "defaultListenerScope",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #controller} is specified.\n\nSee the introductory docs for {@link Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n"
    },
    {
      "name": "defaults",
      "type": "Object/Function",
      "description": "This option is a means of applying default settings to all added items whether added\nthrough the {@link #cfg-items} config or via the {@link #method-add} or {@link #insert}\nmethods.\n\nDefaults are applied to both config objects and instantiated components conditionally\nso as not to override existing properties in the item (see {@link Ext#applyIf}).\n\nIf the defaults option is specified as a function, then the function will be called\nusing this Container as the scope (`this` reference) and passing the added item as\nthe first parameter. Any resulting object from that call is then applied to the item\nas default properties.\n\nFor example, to automatically apply padding to the body of each of a set of\ncontained {@link Ext.panel.Panel} items, you could pass:\n`defaults: {bodyStyle:'padding:15px'}`.\n\nUsage:\n\n    defaults: { // defaults are applied to items, not the container\n        scrollable: true\n    },\n    items: [\n        // default will not be applied here, panel1 will be scrollable: false\n        {\n            xtype: 'panel',\n            id: 'panel1',\n            scrollable: false\n        },\n        // this component will have scrollable: true\n        new Ext.panel.Panel({\n            id: 'panel2'\n        })\n    ]\n"
    },
    {
      "name": "defaultType",
      "type": "String",
      "defaultValue": "'panel'",
      "description": "The default {@link Ext.Component xtype} of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated\nComponent.\n"
    },
    {
      "name": "detachOnRemove",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "True to move any component to the {@link Ext#getDetachedBody detachedBody} when the component\nis removed from this container. This option is only applicable when the component\nis not destroyed while being removed, see {@link #autoDestroy} and {@link #method-remove}.\nIf this option is set to false, the DOM of the component will remain in the current place\nuntil it is explicitly moved.\n"
    },
    {
      "name": "disabled",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to disable the component.\n"
    },
    {
      "name": "disabledCls",
      "type": "String",
      "defaultValue": "Ext.baseCSSPrefix + 'item-disabled'",
      "description": "CSS class to add when the Component is disabled.\n"
    },
    {
      "name": "displayInfo",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "true to display the displayMsg\n"
    },
    {
      "name": "displayMsg",
      "type": "String",
      "defaultValue": "'Displaying {0} - {1} of {2}'",
      "description": "The paging status message to display. Note that this string is\nformatted using the braced numbers {0}-{2} as tokens that are replaced by the values\nfor start, end and total respectively. These tokens should be preserved when overriding\nthis string if showing those values is desired.\n"
    },
    {
      "name": "dock",
      "type": "'top'/'bottom'/'left'/'right'",
      "description": "The side of the {@link Ext.panel.Panel panel} where this component is to be\ndocked when specified in the panel's\n{@link Ext.panel.Panel#dockedItems dockedItems} config.\n\nPossible values are:\n\n - top\n - bottom\n - left\n - right\n"
    },
    {
      "name": "draggable",
      "type": "Boolean/Object",
      "defaultValue": "false",
      "description": "Specify as true to make a {@link #cfg-floating} Component draggable using the Component's\nencapsulating element as the drag handle.\n\nThis may also be specified as a config object for the\n{@link Ext.util.ComponentDragger ComponentDragger} which is instantiated to perform dragging.\n\nFor example to create a Component which may only be dragged around using a certain internal\nelement as the drag handle, use the delegate option:\n\n    new Ext.Component({\n        constrain: true,\n        floating: true,\n        style: {\n            backgroundColor: '#fff',\n            border: '1px solid black'\n        },\n        html: '<h1 style=\"cursor:move\">The title</h1><p>The content</p>',\n        draggable: {\n            delegate: 'h1'\n        }\n    }).show();\n"
    },
    {
      "name": "emptyMsg",
      "type": "String",
      "defaultValue": "'No data to display'",
      "description": "The message to display when no records are found.\n"
    },
    {
      "name": "enableOverflow",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Configure true to make the toolbar provide a button which activates a dropdown Menu to show\nitems which overflow the Toolbar's width.  Setting this too true is the equivalent\nof setting `{@link #overflowHandler}:'menu'`.\n"
    },
    {
      "name": "firstText",
      "type": "String",
      "defaultValue": "'First Page'",
      "description": "The quicktip text displayed for the first page button.\n**Note**: quick tips must be initialized for the quicktip to show.\n"
    },
    {
      "name": "fixed",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Configure as `true` to have this Component fixed at its `X, Y` coordinates in the browser\nviewport, immune to scrolling the document.\n"
    },
    {
      "name": "flex",
      "type": "Number",
      "description": "Flex may be applied to **child items** of a box layout\n({@link Ext.layout.container.VBox vbox} or {@link Ext.layout.container.HBox hbox}).\nEach child item with a flex property will fill space (horizontally in `hbox`, vertically\nin `vbox`) according to that item's **relative** flex value compared to the sum of all items\nwith a flex value specified.\n\nAny child items that have either a `{@link #cfg!flex flex}` of `0` or `undefined`\nwill not be 'flexed' (the initial size will not be changed).\n"
    },
    {
      "name": "floating",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Specify as true to float the Component outside of the document flow using CSS absolute\npositioning.\n\nComponents such as {@link Ext.window.Window Window}s and {@link Ext.menu.Menu Menu}s are\nfloating by default.\n\nFloating Components that are programmatically {@link Ext.Component#method-render rendered}\nwill register themselves with the global {@link Ext.WindowManager ZIndexManager}\n\n### Floating Components as child items of a Container\n\nA floating Component may be used as a child item of a Container. This just allows\nthe floating Component to seek a ZIndexManager by examining the ownerCt chain.\n\nWhen configured as floating, Components acquire, at render time, a\n{@link Ext.ZIndexManager ZIndexManager} which manages a stack of related floating Components.\nThe ZIndexManager sorts its stack according to an incrementing access counter and the\n{@link Ext.util.Floating#alwaysOnTop alwaysOnTop} config when the Component's\n{@link #toFront} method is called.\n\nThe ZIndexManager is found by traversing up the {@link #ownerCt} chain to find an ancestor\nwhich itself is floating. This is so that descendant floating Components of floating\n_Containers_ (Such as a ComboBox dropdown within a Window) can have its zIndex managed\nrelative to any siblings, but always **above** that floating ancestor Container.\n\nIf no floating ancestor is found, a floating Component registers itself with the default\n{@link Ext.WindowManager ZIndexManager}.\n\nFloating components _do not participate in the Container's layout_. Because of this,\nthey are not rendered until you explicitly {@link #method-show} them.\n\nAfter rendering, the ownerCt reference is deleted, and the {@link #floatParent} property\nis set to the found floating ancestor Container. If no floating ancestor Container was found\nthe {@link #floatParent} property will not be set.\n"
    },
    {
      "name": "focusableContainer",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Enable or disable navigation\nwith arrow keys for this FocusableContainer. This option may be useful\nwith nested FocusableContainers, when only the root container should\nhandle keyboard events.\n"
    },
    {
      "name": "focusCls",
      "type": "String",
      "defaultValue": "'x-focused'",
      "description": "CSS class that will be added to focused\ncomponent's {@link #focusClsEl}, and removed when component blurs.\n"
    },
    {
      "name": "focusOnToFront",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "Specifies whether the floated component should be automatically\n{@link Ext.Component#method-focus focused} when it is {@link #toFront brought to the front}.\n"
    },
    {
      "name": "formBind",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "When inside FormPanel, any component configured with `formBind: true` will\nbe enabled/disabled depending on the validity state of the form.\nSee {@link Ext.form.Panel} for more information and example.\n"
    },
    {
      "name": "frame",
      "type": "Boolean",
      "description": "Specify as `true` to have the Component inject framing elements within the Component\nat render time to provide a graphical rounded frame around the Component content.\n\nThis is only necessary when running on outdated, or non standard-compliant browsers\nsuch as Microsoft's Internet Explorer prior to version 9 which do not support rounded corners\nnatively.\n\nThe extra space taken up by this framing is available from the read only property\n{@link #frameSize}.\n"
    },
    {
      "name": "height",
      "type": "Number|String",
      "description": "The height of this component. A numeric value will be interpreted as the number of\npixels; a string value will be treated as a CSS value with units.\n"
    },
    {
      "name": "hidden",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to hide the component.\n"
    },
    {
      "name": "hideMode",
      "type": "String",
      "defaultValue": "'display'",
      "description": "A String which specifies how this Component's encapsulating DOM element will be hidden.\nValues may be:\n\n  - `'display'` : The Component will be hidden using the `display: none` style.\n  - `'visibility'` : The Component will be hidden using the `visibility: hidden` style.\n  - `'offsets'` : The Component will be hidden by absolutely positioning it out of the\n    visible area of the document.\n    This is useful when a hidden Component must maintain measurable dimensions. Hiding using\n    `display` results in a Component having zero dimensions.\n"
    },
    {
      "name": "html",
      "type": "String/Object",
      "defaultValue": "''",
      "description": "An HTML fragment, or a {@link Ext.dom.Helper DomHelper} specification to use as the layout\nelement content. The HTML content is added after the component is rendered, so the document\nwill not contain this HTML at the time the {@link #event-render} event is fired. This content\nis inserted into the body _before_ any configured {@link #contentEl} is appended.\n"
    },
    {
      "name": "id",
      "type": "String",
      "description": "The **unique** id of this component instance.\n\nUse of this config should be considered carefully as this value must be unique across\nall existing components. Components created with an `{@link #cfg!id id}` may be accessed globally\nusing {@link Ext#getCmp Ext.getCmp}.\n\nInstead of using assigned ids, consider a {@link #reference} config and\na {@link #cfg-controller ViewController} to respond to events and perform processing\nupon this Component.\n\nAlternatively, {@link #itemId} and {@link Ext.ComponentQuery ComponentQuery} can be\nused to perform selector-based searching for Components analogous to DOM querying.\nThe {@link Ext.container.Container Container} class contains several helpful\n{@link Ext.container.Container#down shortcut methods} to query its descendant\nComponents by selector.\n\nNote that this `{@link #cfg!id id}` will also be used as the element id for the containing HTML\nelement that is rendered to the page for this component. This allows you to write\nid-based CSS rules to style the specific instance of this component uniquely, and\nalso to select sub-elements using this component's `{@link #cfg!id id}` as the parent.\n\nDefaults to an {@link #getId auto-assigned id}.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed by\n(optional) additional letters, underscores, digits or hyphens.\n"
    },
    {
      "name": "inactiveChildTabIndex",
      "type": "Number",
      "defaultValue": "-1",
      "description": "DOM tabIndex attribute to set on\ninactive Focusable children of this container when using the \"Roaming tabindex\"\ntechnique. This value rarely needs to be changed from its default.\n"
    },
    {
      "name": "inputItemWidth",
      "type": "Number",
      "defaultValue": "30",
      "description": "The width in pixels of the input field used to display and change the current page number.\n"
    },
    {
      "name": "itemId",
      "type": "String",
      "description": "The **unique** id of this component instance within its container. See also the\n{@link #reference} config.\n\nAn `{@link #cfg!itemId itemId}` can be used as an alternative way to get a reference to a component\nwhen no object reference is available. Instead of using an `{@link #id}` with\n{@link Ext#getCmp getCmp}, use `{@link #cfg!itemId itemId}` with\n{@link Ext.container.Container#getComponent getComponent} which will retrieve `{@link #cfg!itemId itemId}`'s\nor {@link #id}'s. Since `{@link #cfg!itemId itemId}`'s are an index to the container's internal collection,\nthe `{@link #cfg!itemId itemId}` is scoped locally to the container -- avoiding potential conflicts with\n{@link Ext.ComponentManager}, which requires a **unique** {@link #id} value.\n\n    var c = new Ext.panel.Panel({ //\n        height: 300,\n        renderTo: document.body,\n        layout: 'auto',\n        items: [{\n            itemId: 'p1',\n            title: 'Panel 1',\n            height: 150\n        },{\n            itemId: 'p2',\n            title: 'Panel 2',\n            height: 150\n        }]\n    });\n\n    p1 = c.getComponent('p1'); // not the same as Ext.getCmp()\n    console.log(p1);\n    p2 = p1.ownerCt.getComponent('p2'); // reference via a sibling\n    console.log(p2);\n\nAlso see {@link #id}, `{@link Ext.container.Container#query}`,\n`{@link Ext.container.Container#down}` and `{@link Ext.container.Container#child}`.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed by\n(optional) additional letters, underscores, digits or hyphens.\n\n**Note**: to access the container of an item see {@link #ownerCt}.\n"
    },
    {
      "name": "items",
      "type": "Object/Object[]",
      "defaultValue": "undefined",
      "description": "A single item, or an array of child Components to be added to this container\n\n**Unless configured with a {@link #cfg!layout}, a Container simply renders child\nComponents serially into its encapsulating element and performs no sizing or\npositioning upon them.**\n\nExample:\n\n    // specifying a single item\n    items: {...},\n    layout: 'fit',    // The single items is sized to fit\n\n    // specifying multiple items\n    items: [{...}, {...}],\n    layout: 'hbox', // The items are arranged horizontally\n\nEach item may be:\n\n- A {@link Ext.Component Component}\n- A Component configuration object\n\nIf a configuration object is specified, the actual type of Component to be\ninstantiated my be indicated by using the {@link Ext.Component#xtype xtype} option.\n\nEvery Component class has its own {@link Ext.Component#xtype xtype}.\n\nIf an {@link Ext.Component#xtype xtype} is not explicitly specified, the\n{@link #cfg-defaultType} for the Container is used, which by default is usually `panel`.\n\n# Notes:\n\nExt uses lazy rendering. Child Components will only be rendered\nshould it become necessary. Items are automatically laid out when they are first\nshown (no sizing is done while hidden), or in response to a {@link #method-updateLayout}\ncall.\n\nDo not specify {@link Ext.panel.Panel#contentEl contentEl} or\n{@link Ext.panel.Panel#html html} with `items`.\n"
    },
    {
      "name": "keyMap",
      "type": "Object",
      "defaultValue": "null",
      "description": "An object containing handlers for keyboard events. The property names of this\nobject are the key name and any modifiers. The values of the properties are the\ndescriptors of how to handle each event.\n\nThe handler descriptor can be simply the handler function(either the\nliteral function or the method name), or it can be an object with these\nproperties:\n\n - `handler`: The function or its name to call to handle the event.\n - `scope`: The this pointer context (can be \"this\" or \"controller\").\n - `event`: An optional override of the key event to which to listen.\n\n**Important:** Calls to `setKeyMap` do not replace the entire `{@link #cfg!keyMap keyMap}` but\ninstead update the provided mappings. That is, unless `null` is passed as the\nvalue of the `{@link #cfg!keyMap keyMap}` which will clear the `{@link #cfg!keyMap keyMap}` of all entries.\n"
    },
    {
      "name": "keyMapEnabled",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Enables or disables processing keys in the `{@link #cfg!keyMap keyMap}`. This value starts as\n`null` and if it is `null` when `{@link #method!initKeyMap initKeyMap}` is called, it will automatically\nbe set to `true`. Since `{@link #method!initKeyMap initKeyMap}` is called by `{@link Ext.Component}` at the\nproper time, this is not something application code normally handles.\n"
    },
    {
      "name": "keyMapTarget",
      "type": "String",
      "defaultValue": "'el'",
      "description": "The name of the member that should be used to listen for keydown/keypress events.\nThis is intended to be controlled at the class level not per instance.\n"
    },
    {
      "name": "lastText",
      "type": "String",
      "defaultValue": "'Last Page'",
      "description": "The quicktip text displayed for the last page button.\n**Note**: quick tips must be initialized for the quicktip to show.\n"
    },
    {
      "name": "layout",
      "type": "Ext.enums.Layout/Object",
      "defaultValue": "undefined",
      "description": "This class assigns a default layout (`layout: 'hbox'` or `layout: 'vbox'` depending upon orientation).\n\nDevelopers _may_ override this configuration option if another layout is required.\nSee {@link Ext.container.Container#layout} for additional information.\n"
    },
    {
      "name": "liquidLayout",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Components that achieve their internal layout results using solely CSS with no JS\nintervention must set this to true.  This allows the component to opt out of the\nlayout run when used inside certain container layouts such as {@link\nExt.layout.container.Form Form} and {@link Ext.layout.container.Auto Auto}\nresulting in a performance gain. The following components currently use liquid\nlayout (`liquidLayout: true`):\n\n- All Form Fields (subclasses of {@link Ext.form.field.Base})\n- {@link Ext.button.Button}\n\nIt is important to keep in mind that components using liquidLayout do not fire\nthe following events:\n\n- {@link #event-resize}\n- {@link #event-boxready}\n\nIn addition, liquidLayout components do not call the following template methods:\n\n- {@link #method!afterComponentLayout}\n- {@link #method!onBoxReady}\n- {@link #method!onResize}\n\nAny component that needs to fire these events or to have these methods called during\nits life cycle needs to set `{@link #cfg!liquidLayout liquidLayout}` to `false`.  The following example\ndemonstrates how to enable the resize event for a\n{@link Ext.form.field.TextArea TextArea Field}:\n\n    @example\n    var win = Ext.create({\n            xtype: 'window',\n            title: 'Resize This Window!',\n            height: 100,\n            width: 200,\n            layout: 'anchor',\n            items: [{\n                xtype: 'textarea',\n                anchor: '0 0',\n                liquidLayout: false // allows the textarea to fire \"resize\"\n            }]\n        }),\n        textfield = win.items.getAt(0);\n\n    win.show();\n\n    textfield.on('resize', function(textfield, width, height) {\n        Ext.Msg.alert('Text Field Resized', 'width: ' + width + ', height: ' + height);\n    });\n\nUse caution when setting `{@link #cfg!liquidLayout liquidLayout}` to `false` as it carries a performance penalty\nsince it means the layout system must perform expensive DOM reads to determine the\nComponent's size.\n"
    },
    {
      "name": "listeners",
      "type": "Object",
      "description": "\nA config object containing one or more event handlers to be added to this object during\ninitialization. This should be a valid listeners config object as specified in the\n{@link Ext.util.Observable#addListener addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component Components}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\",\n\"mouseover\" etc), this is usually only done when extra value can be added. For example\nthe {@link Ext.view.View DataView}'s **`{@link Ext.view.View#itemclick itemclick}`**\nevent passing the node clicked on. To access DOM events directly from a child element\nof a Component, we need to specify the `element` option to identify the Component\nproperty to add a DOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n"
    },
    {
      "name": "liveDrag",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "True to drag the component itself.  Else a lightweight version of the component\nwill be shown (_using the component's ghost() method_).\n\n**Note:** This config is only relevant when used with dragging implemented via\n{@link Ext.util.ComponentDragger}.\n"
    },
    {
      "name": "loader",
      "type": "Ext.ComponentLoader/Object",
      "description": "A configuration object or an instance of a {@link Ext.ComponentLoader} to load remote content\nfor this Component.\n\n    Ext.create('Ext.Component', {\n        loader: {\n            url: 'content.html',\n            autoLoad: true\n        },\n        renderTo: Ext.getBody()\n    });\n"
    },
    {
      "name": "margin",
      "type": "Number/String",
      "description": "Specifies the margin for this component. The margin can be a single numeric value to apply\nto all sides or it can be a CSS style specification for each style,\nfor example: '10 5 3 10' (top, right, bottom, left).\n"
    },
    {
      "name": "maskDefaults",
      "type": "Object",
      "description": "Default LoadMask configuration for {@link #method-setLoading}.\n"
    },
    {
      "name": "maskElement",
      "type": "String",
      "defaultValue": "null",
      "description": "Related to the {@link #cfg-childEls} configuration which specifies named properties\nwhich correspond to component sub-elements.\n\nThe name of the element property in this component to mask when masked by a LoadMask.\n\nDefaults to `null` to indicate that Components cannot by default contain a LoadMask,\nand that any LoadMask should be rendered into the document body.\n\nFor example, Panels use `\"el\"` to indicate that the whole panel should be masked.\nThis could be configured to be `\"body\"` so that only the body is masked and toolbars\nand the header are still mouse-accessible.\n"
    },
    {
      "name": "maxHeight",
      "type": "Number",
      "defaultValue": "null",
      "description": "The maximum value in pixels which this Component will set its height to.\n\n**Warning:** This will override any size management applied by layout managers.\n"
    },
    {
      "name": "maxWidth",
      "type": "Number",
      "defaultValue": "null",
      "description": "The maximum value in pixels which this Component will set its width to.\n\n**Warning:** This will override any size management applied by layout managers.\n"
    },
    {
      "name": "minHeight",
      "type": "Number",
      "defaultValue": "null",
      "description": "The minimum value in pixels which this Component will set its height to.\n\n**Warning:** This will override any size management applied by layout managers.\n"
    },
    {
      "name": "minWidth",
      "type": "Number",
      "defaultValue": "null",
      "description": "The minimum value in pixels which this Component will set its width to.\n\n**Warning:** This will override any size management applied by layout managers.\n"
    },
    {
      "name": "modal",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "True to make the floated component modal and mask everything behind it when displayed,\nfalse to display it without restricting access to other UI elements.\n"
    },
    {
      "name": "modelValidation",
      "type": "Boolean",
      "description": "This config enables binding to your `{@link Ext.data.Model#validators}`. This\nis only processed by form fields (e.g., `{@link Ext.form.field.Text}`) at present, but\nthis setting is inherited and so can be set on a parent container.\n\nWhen set to `true` by a component or not set by a component but inherited from\nan ancestor container, `{@link Ext.data.Validation}` records are used to automatically\nbind validation results for any form field to which a `value` is bound.\n\nWhile this config can be set arbitrarily high in the component hierarchy, doing\nso can create a lot overhead if most of your form fields do not actually rely on\n`validators` in your data model.\n\nUsing this setting for a form that is bound to an `{@link Ext.data.Model}` might look\nlike this:\n\n     {\n         xtype: 'panel',\n         modelValidation: true,\n         items: [{\n             xtype: 'textfield',\n             bind: '{theUser.firstName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.lastName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.phoneNumber}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.email}'\n         }]\n     }\n\nNotice that \"validation\" is a pseudo-association defined for all entities. See\n`{@link Ext.data.Model#getValidation}` for further details.\n"
    },
    {
      "name": "nameable",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Set to `true` for this component's `name` property to be tracked by its containing\n`nameHolder`.\n"
    },
    {
      "name": "nameHolder",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "When `true` child components are tracked by their `name` property and can be\nretrieved using the `{@link #method!lookupName lookupName}` method.\n"
    },
    {
      "name": "nextText",
      "type": "String",
      "defaultValue": "'Next Page'",
      "description": "The quicktip text displayed for the next page button.\n**Note**: quick tips must be initialized for the quicktip to show.\n"
    },
    {
      "name": "overCls",
      "type": "String",
      "defaultValue": "''",
      "description": "An optional extra CSS class that will be added to this component's Element when the mouse\nmoves over the Element, and removed when the mouse moves out. This can be useful for adding\ncustomized 'active' or 'hover' styles to the component or any of its children using standard\nCSS rules.\n"
    },
    {
      "name": "overflowHandler",
      "type": "String",
      "defaultValue": "null",
      "description": "\n- `null` - hidden overflow\n- `'scroller'` to render left/right scroller buttons on either side of the breadcrumb\n- `'menu'` to render the overflowing buttons as items of an overflow menu.\n"
    },
    {
      "name": "overflowX",
      "type": "String",
      "description": "Possible values are:\n\n - `'auto'` to enable automatic horizontal scrollbar (Style overflow-x: 'auto').\n - `'scroll'` to always enable horizontal scrollbar (Style overflow-x: 'scroll').\n\nThe default is overflow-x: 'hidden'. This should not be combined with {@link #autoScroll}.\n"
    },
    {
      "name": "overflowY",
      "type": "String",
      "description": "Possible values are:\n\n - `'auto'` to enable automatic vertical scrollbar (Style overflow-y: 'auto').\n - `'scroll'` to always enable vertical scrollbar (Style overflow-y: 'scroll').\n\nThe default is overflow-y: 'hidden'. This should not be combined with {@link #autoScroll}.\n"
    },
    {
      "name": "padding",
      "type": "Number/String",
      "description": "Specifies the padding for this component. The padding can be a single numeric value to apply\nto all sides or it can be a CSS style specification for each style,\nfor example: '10 5 3 10' (top, right, bottom, left).\n"
    },
    {
      "name": "plugins",
      "type": "Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract",
      "description": "This config describes one or more plugin config objects used to create plugin\ninstances for this component.\n\nPlugins are a way to bundle and reuse custom functionality. Plugins should extend\n`{@link Ext.plugin.Abstract}` but technically the only requirement for a valid plugin\nis that it contain an `init` method that accepts a reference to its owner. Once\na plugin is created, the owner will call the `init` method, passing a reference\nto itself. Each plugin can then call methods or respond to events on its owner\nas needed to provide its functionality.\n\nThis config's value can take several different forms.\n\nThe value can be a single string with the plugin's {@link Ext.enums.Plugin alias}:\n\n    plugins: 'cellediting',\n\nThe preferred form for multiple plugins or to configure plugins is the keyed-object\nform (new in version 6.5):\n\n     plugins: {\n         gridviewdragdrop: true,\n         cellediting: {\n             clicksToEdit: 1\n         }\n     },\n\nThe keys are `{@link #cfg!id id}`'s as well as the default type alias.\n\nThe `{@link #cfg!plugins plugins}` config can also be an array of plugin aliases:\n\n    plugins: [ 'cellediting', 'gridviewdragdrop' ],\n\nAn array can also contain elements that are config objects with a `ptype` property\nholding the type alias:\n\n     plugins: ['gridviewdragdrop', {\n         ptype: 'cellediting',\n         clicksToEdit: 1\n     }],\n"
    },
    {
      "name": "prependButtons",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "true to insert any configured items _before_ the paging buttons.\n"
    },
    {
      "name": "prevText",
      "type": "String",
      "defaultValue": "'Previous Page'",
      "description": "The quicktip text displayed for the previous page button.\n**Note**: quick tips must be initialized for the quicktip to show.\n"
    },
    {
      "name": "publishes",
      "type": "String/String[]/Object",
      "defaultValue": "null",
      "description": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found\nin a class  config block. In these situations, you may utilize {@link #publishState}\nif the property has a  setter method. Let's use\n{@link Ext.form.Labelable#setFieldLabel setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n"
    },
    {
      "name": "reference",
      "type": "String",
      "defaultValue": "null",
      "description": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.container.Container#referenceHolder view}\nor its {@link Ext.app.ViewController ViewController}. See the documentation in\n{@link Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n"
    },
    {
      "name": "referenceHolder",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "If `true`, this container will be marked as being a point in the hierarchy where\nreferences to items with a specified `reference` config will be held. The container\nwill automatically become a referenceHolder if a {@link #controller} is specified.\n\nSee the introductory docs for {@link Ext.container.Container} for more information\nabout references & reference holders.\n"
    },
    {
      "name": "refreshText",
      "type": "String",
      "defaultValue": "'Refresh'",
      "description": "The quicktip text displayed for the Refresh button.\n**Note**: quick tips must be initialized for the quicktip to show.\n"
    },
    {
      "name": "region",
      "type": "\"north\"/\"south\"/\"east\"/\"west\"/\"center\"",
      "defaultValue": "undefined",
      "description": "Defines the region inside {@link Ext.layout.container.Border border layout}.\n\nPossible values:\n\n- north - Positions component at top.\n- south - Positions component at bottom.\n- east - Positions component at right.\n- west - Positions component at left.\n- center - Positions component at the remaining space.\n  There **must** be a component with `region: \"center\"` in every border layout.\n"
    },
    {
      "name": "renderConfig",
      "type": "Object",
      "description": "renderConfig wraps configs that do not get applied until after the component is\nrendered. Unlike normal config system properties, renderConfigs use a special\nsetter method to store values on the instance instead of running the apply and\nupdate methods if it is called before the component is rendered. Then, after the\ncomponent has been rendered, these values are processed by the normal apply and\nupdate method for the config.\n\nThis means that calling the get method for the config prior to render will return\nwhatever raw value has been set, while calling the getter after render will return\nthe value after processing by the config's apply method. If this distinction needs\nto be made, it is the caller's responsibility to check for the rendered state and\nhandle such intermediate config values.\n"
    },
    {
      "name": "renderData",
      "type": "Object",
      "description": "\nThe data used by {@link #renderTpl} in addition to the following property values\nof the component:\n\n- id\n- ui\n- uiCls\n- baseCls\n- componentCls\n- frame\n\nSee {@link #renderSelectors} and {@link #cfg-childEls} for usage examples.\n"
    },
    {
      "name": "renderSelectors",
      "type": "Object",
      "description": "An object containing properties specifying CSS selectors which identify child elements\ncreated by the render process.\n\nAfter the Component's internal structure is rendered according to the {@link #renderTpl},\nthis object is iterated through, and the found Elements are added as properties\nto the Component using the `renderSelector` property name.\n\nFor example, a Component which renders a title and description into its element:\n\n     Ext.create('Ext.Component', {\n         renderTo: Ext.getBody(),\n         renderTpl: [\n             '<h1 class=\"title\">{title}</h1>',\n             '<p>{desc}</p>'\n         ],\n         renderData: {\n             title: \"Error\",\n             desc: \"Something went wrong\"\n         },\n         renderSelectors: {\n             titleEl: 'h1.title',\n             descEl: 'p'\n         },\n         listeners: {\n             afterrender: function(cmp){\n                 // After rendering the component will have a titleEl and descEl properties\n                 cmp.titleEl.setStyle({color: \"red\"});\n             }\n         }\n     });\n\nThe use of `{@link #cfg!renderSelectors renderSelectors}` is deprecated (for performance reasons). The above\ncode should be refactored into something like this:\n\n     Ext.create('Ext.Component', {\n         renderTo: Ext.getBody(),\n         renderTpl: [\n             '<h1 class=\"title\" id=\"{id}-titleEl\" data-ref=\"titleEl\">{title}</h1>',\n             '<p id=\"{id}-descEl\" data-ref=\"descEl\">{desc}</p>'\n         ],\n         renderData: {\n             title: \"Error\",\n             desc: \"Something went wrong\"\n         },\n         childEls: [\n             'titleEl',\n             'descEl'\n         ]\n     });\n\nTo use `{@link #cfg!childEls childEls}` yet retain the use of selectors (which remains as expensive as\n`{@link #cfg!renderSelectors renderSelectors}`):\n\n     Ext.create('Ext.Component', {\n         renderTo: Ext.getBody(),\n         renderTpl: [\n             '<h1 class=\"title\">{title}</h1>',\n             '<p>{desc}</p>'\n         ],\n         renderData: {\n             title: \"Error\",\n             desc: \"Something went wrong\"\n         },\n         childEls: {\n             titleEl: { selectNode: 'h1.title' },\n             descEl: { selectNode: 'p' }\n         }\n     });\n"
    },
    {
      "name": "renderTo",
      "type": "String/HTMLElement/Ext.dom.Element",
      "description": "Specify the `{@link #cfg!id id}` of the element, a DOM element or an existing Element that this component\nwill be rendered into.\n\n**Notes:**\n\nDo *not* use this option if the Component is to be a child item of a\n{@link Ext.container.Container Container}. It is the responsibility of the\n{@link Ext.container.Container Container}'s\n{@link Ext.container.Container#layout layout manager} to render and manage its child items.\n\nWhen using this config, a call to `render()` is not required.\n\nSee also: {@link #method-render}.\n"
    },
    {
      "name": "renderTpl",
      "type": "Ext.XTemplate/String/String[]",
      "defaultValue": "'<tpl if=\"hasTabGuard\">{% this.renderTabGuard(out, values, \\'before\\'); %}</tpl>' + '{% this.renderContainer(out,values) %}' + '<tpl if=\"hasTabGuard\">{% this.renderTabGuard(out, values, \\'after\\'); %}</tpl>'",
      "description": "An {@link Ext.XTemplate XTemplate} used to create the internal structure inside\nthis Component's encapsulating {@link #getEl Element}.\n\nYou do not normally need to specify this. For the base classes {@link Ext.Component} and\n{@link Ext.container.Container}, this defaults to **`null`** which means that they will be\ninitially rendered with no internal structure; they render their {@link #getEl Element}\nempty. The more specialized classes with complex DOM structures provide their own template\ndefinitions.\n\nThis is intended to allow the developer to create application-specific utility Components\nwith customized internal structure.\n\nUpon rendering, any created child elements may be automatically imported into object\nproperties using the {@link #renderSelectors} and {@link #cfg-childEls} options.\n"
    },
    {
      "name": "resetFocusPosition",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "When `true`, FocusableContainer\nwill reset last focused position whenever focus leaves the container.\nSubsequent tabbing into the container will always focus the first eligible\nchild item.\n\nWhen `false`, subsequent tabbing into the container will focus the child\nitem that was last focused before.\n"
    },
    {
      "name": "resizable",
      "type": "Boolean/Object",
      "description": "Specify as `true` to apply a {@link Ext.resizer.Resizer Resizer} to this Component\nafter rendering.\n\nMay also be specified as a config object to be passed to the constructor of\n{@link Ext.resizer.Resizer Resizer} to override any defaults. By default the Component\npasses its minimum and maximum size, and uses `{@link Ext.resizer.Resizer#dynamic}: false`\n"
    },
    {
      "name": "resizeHandles",
      "type": "String",
      "defaultValue": "'all'",
      "description": "A valid {@link Ext.resizer.Resizer} handles config string. Only applies when\nresizable = true.\n"
    },
    {
      "name": "saveDelay",
      "type": "Number",
      "defaultValue": "100",
      "description": "A buffer to be applied if many state events are fired within a short period.\n"
    },
    {
      "name": "scrollable",
      "type": "Boolean/String/Object",
      "defaultValue": "null",
      "description": "Configuration options to make this Component scrollable. Acceptable values are:\n\n- `true` to enable auto scrolling.\n- `false` (or `null`) to disable scrolling - this is the default.\n- `x` or `horizontal` to enable horizontal scrolling only\n- `y` or `vertical` to enable vertical scrolling only\n\nAlso accepts a configuration object for a `{@link Ext.scroll.Scroller}` if\nif advanced configuration is needed.\n\nThe getter for this config returns the {@link Ext.scroll.Scroller Scroller}\ninstance.  You can use the Scroller API to read or manipulate the scroll position:\n\n    // scrolls the component to 5 on the x axis and 10 on the y axis\n    component.getScrollable().scrollTo(5, 10);\n"
    },
    {
      "name": "session",
      "type": "Boolean/Object/Ext.data.Session",
      "defaultValue": "null",
      "description": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n"
    },
    {
      "name": "shadow",
      "type": "String/Boolean",
      "defaultValue": "'sides'",
      "description": "Specifies whether the floating component should be given a shadow. Set to true\nto automatically create an {@link Ext.Shadow}, or a string indicating the shadow's display\n{@link Ext.Shadow#mode}. Set to false to disable the shadow.\n"
    },
    {
      "name": "shadowOffset",
      "type": "Number",
      "description": "Number of pixels to offset the shadow.\n"
    },
    {
      "name": "shareableName",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Set to `true` to allow this component's `name` to be shared by other items in the\nsame `nameHolder`. Such items will be returned in an array from `lookupName`.\n"
    },
    {
      "name": "shim",
      "type": "Boolean",
      "description": "`true` to enable an iframe shim for this Component to keep\nwindowed objects from showing through.\n"
    },
    {
      "name": "shrinkWrap",
      "type": "Boolean/Number",
      "defaultValue": "2",
      "description": "\nThe possible values for shrinkWrap are:\n\n  - 0 (or `false`): Neither width nor height depend on content.\n  - 1: Width depends on content (shrink wraps), but height does not.\n  - 2: Height depends on content (shrink wraps), but width does not.\n  - 3 (or `true`): Both width and height depend on content (shrink wrap).\n\nIn CSS terms, shrink-wrap width is analogous to an inline-block element as opposed\nto a block-level element.\n##Non-Panel Components\n\nThe shrinkWrap config is a class-level config and should be used when defining a\nsubclass.\nIt is not intended to be set as a config on instances of a given component.\n\nFor non-Panel components, shrinkWrap is a descriptive config only.  It should be\nset when defining your own custom class including the DOM elements used to\nconstruct the component.  The shrinkWrap property does not itself apply styling on\nthe component elements.  Rather, it should describe the CSS styling you've applied\nto your custom component (_refer to the numeric matrix above_).\n\nWhen a component is owned by a container the layout of that container will inspect\nthe component's shrinkWrap property during layout.  The layout then uses the\ncontent-wrapping policy described by shrinkWrap to correctly size and position the\ncontainer's child items.\n"
    },
    {
      "name": "stateEvents",
      "type": "String[]",
      "description": "An array of events that, when fired, should trigger this object to\nsave its state. `{@link #cfg!stateEvents stateEvents}` defaults to the `{@link #cfg!stateEvents stateEvents}` associated with the\ncomponent you are using.  Any events you statically set will be appended to that list.\n`{@link #cfg!stateEvents stateEvents}` may be any type of event supported by this object, including\nbrowser or custom events (e.g., `['click', 'customerchange']`).\n\nSee `{@link #stateful}` for an explanation of saving and\nrestoring object state.\nBy default the following stateEvents are added:\n\n - {@link #event-resize}\n"
    },
    {
      "name": "stateful",
      "type": "Boolean/Object",
      "defaultValue": "false",
      "description": "A flag which causes the object to attempt to restore the state of\ninternal properties from a saved state on startup. The object must have\na {@link #stateId} for state to be managed.\n\nAuto-generated ids are not guaranteed to be stable across page loads and\ncannot be relied upon to save and restore the same state for a object.\n\nFor state saving to work, the state manager's provider must have been\nset to an implementation of {@link Ext.state.Provider} which overrides the\n{@link Ext.state.Provider#set set} and {@link Ext.state.Provider#get get}\nmethods to save and recall name/value pairs. A built-in implementation,\n{@link Ext.state.CookieProvider} is available.\n\nTo set the state provider for the current page:\n\n    Ext.state.Manager.setProvider(new Ext.state.CookieProvider({\n        expires: new Date(new Date().getTime()+(1000*60*60*24*7)), // 7 days from now\n    }));\n\nA stateful object attempts to save state when one of the events\nlisted in the {@link #stateEvents} configuration fires.\n\nTo save state, a stateful object first serializes its state by\ncalling *{@link #getState}*.\n\nThe Component base class implements {@link #getState} to save its width and\nheight within the state only if they were initially configured, and have\nchanged from the configured value.\n\nThe Panel class saves its collapsed state in addition to that.\n\nThe Grid class saves its column state and store state (sorters and filters and grouper)\nin addition to its superclass state.\n\nIf there is more application state to be save, the developer must provide\nan implementation which first calls the superclass method to inherit the above behaviour,\nand then injects new properties into the returned object.\n\nThe value yielded by `{@link #method!getState getState}` is passed to {@link Ext.state.Manager#set}\nwhich uses the configured {@link Ext.state.Provider} to save the object\nkeyed by the {@link #stateId}.\n\nDuring construction, a stateful object attempts to *restore* its state by calling\n{@link Ext.state.Manager#get} passing the {@link #stateId}\n\nThe resulting object is passed to {@link #applyState}*. The default implementation of\n{@link #applyState} simply copies properties into the object, but a developer may\noverride this to support restoration of more complex application state.\n\nYou can perform extra processing on state save and restore by attaching\nhandlers to the {@link #beforestaterestore}, {@link #staterestore},\n{@link #beforestatesave} and {@link #statesave} events. In some simple cases,\npassing an object for the `{@link #cfg!stateful stateful}` config may suffice. If an object is\nprovided, the properties of that object are used to include or exclude stateful\nproperties returned by `{@link #method!getState getState}`. For example:\n\n     stateful: {\n         height: false, // never persist the height\n         width: true    // always persist the width\n     }\n\nThe above is roughly equivalent to the following:\n\n     getState: function () {\n         var state = this.callParent();\n\n         delete state.height;\n         state.width = this.width;\n\n         return state;\n     }\n"
    },
    {
      "name": "stateId",
      "type": "String",
      "description": "The unique id for this object to use for state management purposes.\n\nSee {@link #stateful} for an explanation of saving and restoring state.\n"
    },
    {
      "name": "store",
      "type": "Ext.data.Store/String",
      "description": "The data source to which the paging toolbar is bound (must be the same store instance\nused in the grid / tree). Acceptable values for this property are:\n\n  - Any {@link Ext.data.Store Store} class or subclass\n  - An {@link Ext.data.Store#storeId ID of a store}\n\nIf no `{@link #cfg!store store}` is provided, the `{@link #cfg!store store}` of the owner component (if there is an\nowner and it has a store) is used. The owner store is bound when this component\nis rendered.\n"
    },
    {
      "name": "style",
      "type": "String/Object",
      "description": "A custom style specification to be applied to this component's Element.\nShould be a valid argument to {@link Ext.dom.Element#applyStyles}.\n\n    new Ext.panel.Panel({\n        title: 'Some Title',\n        renderTo: Ext.getBody(),\n        width: 400, height: 300,\n        layout: 'form',\n        items: [{\n            xtype: 'textarea',\n            style: {\n                width: '95%',\n                marginBottom: '10px'\n            }\n        },\n        new Ext.button.Button({\n            text: 'Send',\n            minWidth: '100',\n            style: {\n                marginBottom: '10px'\n            }\n        })\n        ]\n    });\n"
    },
    {
      "name": "suspendLayout",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "If true, suspend calls to updateLayout. Useful when batching multiple adds to a container\nand not passing them as multiple arguments or an array.\n"
    },
    {
      "name": "tabGuard",
      "type": "Boolean",
      "description": "When set to `true`, two elements are added to the container's element. These are the\n`{@link #tabGuardBeforeEl}` and `{@link #tabGuardAfterEl}`.\n"
    },
    {
      "name": "tabIndex",
      "type": "Number",
      "description": "DOM tabIndex attribute for this component's {@link #focusEl}.\n"
    },
    {
      "name": "toFrontOnShow",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "True to automatically call {@link #toFront} when the {@link #method-show} method is called\non an already visible, floating component.\n"
    },
    {
      "name": "touchAction",
      "type": "Object",
      "defaultValue": "null",
      "description": "\nEmulates the behavior of the CSS\n[touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)\nproperty in a cross-browser compatible manner.\n\nKeys in this object are touch action names, and values are `false` to disable\na touch action or `true` to enable it.  Accepted keys are:\n\n- `panX`\n- `panY`\n- `pinchZoom`\n- `doubleTapZoom`\n\nAll touch actions are enabled (`true`) by default, so it is usually only necessary\nto specify which touch actions to disable.  For example, the following disables\nonly horizontal scrolling and pinch-to-zoom on the component's main element:\n\n    touchAction: {\n        panX: false,\n        pinchZoom: false\n    }\n\nTouch actions can be specified on child elements using the child element name,\nfor example:\n\n    // disables horizontal scrolling on the main element, and double-tap-zoom\n    // on the child element named \"body\"\n    touchAction: {\n        panY: false\n        body: {\n            doubleTapZoom: false\n        }\n    }\n\nThe primary motivation for setting the touch-action of an element is to prevent\nthe browser's default handling of a gesture such as pinch-to-zoom, or\ndrag-to-scroll, so that the application can implement its own handling of that\ngesture on the element.  Suppose, for example, a component has a custom drag\nhandler on its element and wishes to prevent horizontal scrolling of its container\nwhile it is being dragged:\n\n    Ext.create('Ext.Component', {\n        touchAction: {\n            panX: false\n        },\n        listeners: {\n            drag: function(e) {\n                // implement drag logic\n            }\n        }\n    });\n"
    },
    {
      "name": "tpl",
      "type": "Ext.XTemplate/Ext.Template/String/String[]",
      "description": "An {@link Ext.Template}, {@link Ext.XTemplate} or an array of strings to form\nan Ext.XTemplate. Used in conjunction with the `{@link #data}` and `{@link #tplWriteMode}`\nconfigurations.\n"
    },
    {
      "name": "tplWriteMode",
      "type": "String",
      "defaultValue": "'overwrite'",
      "description": "The Ext.(X)Template method to use when updating the content area of the Component.\nSee `{@link Ext.XTemplate#overwrite}` for information on default mode.\n"
    },
    {
      "name": "trackMenus",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "If `true`, when a toolbar button has a menu open, then mousing over other\ntoolbar buttons opens their menus.\n"
    },
    {
      "name": "twoWayBindable",
      "type": "String/String[]/Object",
      "defaultValue": "null",
      "description": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `value` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n"
    },
    {
      "name": "ui",
      "type": "String",
      "defaultValue": "'default'",
      "description": "A UI style for a component.\n"
    },
    {
      "name": "uiCls",
      "type": "String[]",
      "defaultValue": "[]",
      "description": "An array of of `classNames` which are currently applied to this component.\n"
    },
    {
      "name": "userCls",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.\n\nFor example:\n\n     items: [{\n         xtype: 'button',\n         userCls: 'my-button'\n     ...\n     }]\n"
    },
    {
      "name": "vertical",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Set to `true` to make the toolbar vertical. The layout will become a `vbox`.\n"
    },
    {
      "name": "viewModel",
      "type": "String/Object/Ext.app.ViewModel",
      "defaultValue": "null",
      "description": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session Data Session}`. This is\ndetermined by calling `getInheritedSession`.\n"
    },
    {
      "name": "weight",
      "type": "Number",
      "defaultValue": "null",
      "description": "A value to control how Components are laid out in a\n{@link Ext.layout.container.Border Border} layout or as docked items.\n\nIn a Border layout, this can control how the regions (not the center) region lay out\nif the west or east take full height or if the north or south region take full width.\nAlso look at the {@link Ext.layout.container.Border#regionWeights} on the Border layout.\nAn example to show how you can take control of this is:\n\n    Ext.create('Ext.container.Viewport', {\n        layout      : 'border',\n        defaultType : 'panel',\n        items       : [\n            {\n                region : 'north',\n                title  : 'North',\n                height : 100\n            },\n            {\n                region : 'south',\n                title  : 'South',\n                height : 100,\n                weight : -25\n            },\n            {\n                region : 'west',\n                title  : 'West',\n                width  : 200,\n                weight : 15\n            },\n            {\n                region : 'east',\n                title  : 'East',\n                width  : 200\n            },\n            {\n                region : 'center',\n                title  : 'center'\n            }\n        ]\n    });\n\nIf docked items, the weight will order how the items are laid out. Here is an example\nto put a {@link Ext.toolbar.Toolbar} above a {@link Ext.panel.Panel}'s header:\n\n    Ext.create('Ext.panel.Panel', {\n        renderTo    : document.body,\n        width       : 300,\n        height      : 300,\n        title       : 'Panel',\n        html        : 'Panel Body',\n        dockedItems : [\n            {\n                xtype : 'toolbar',\n                items : [\n                    {\n                        text : 'Save'\n                    }\n                ]\n            },\n            {\n                xtype  : 'toolbar',\n                weight : -10,\n                items  : [\n                    {\n                        text : 'Remove'\n                    }\n                ]\n            }\n        ]\n    });\n"
    },
    {
      "name": "width",
      "type": "Number|String",
      "description": "The width of this component. A numeric value will be interpreted as the number of\npixels; a string value will be treated as a CSS value with units.\n"
    },
    {
      "name": "xtype",
      "type": "Ext.enums.Widget",
      "description": "**Note:** Only applies to {@link Ext.Component} derived classes when used as\na config in {@link Ext#define Ext.define}.\n\nThis property provides a shorter alternative to creating objects than using a full\nclass name. Using `{@link #cfg!xtype xtype}` is the most common way to define component instances,\nespecially in a container. For example, the items in a form containing text fields\ncould be created explicitly like so:\n\n     items: [\n         Ext.create('Ext.form.field.Text', {\n             fieldLabel: 'Foo'\n         }),\n         Ext.create('Ext.form.field.Text', {\n             fieldLabel: 'Bar'\n         }),\n         Ext.create('Ext.form.field.Number', {\n             fieldLabel: 'Num'\n         })\n     ]\n\nBut by using `{@link #cfg!xtype xtype}`, the above becomes:\n\n     items: [\n         {\n             xtype: 'textfield',\n             fieldLabel: 'Foo'\n         },\n         {\n             xtype: 'textfield',\n             fieldLabel: 'Bar'\n         },\n         {\n             xtype: 'numberfield',\n             fieldLabel: 'Num'\n         }\n     ]\n\nWhen the `{@link #cfg!xtype xtype}` is common to many items, {@link Ext.container.Container#defaultType}\nis another way to specify the `{@link #cfg!xtype xtype}` for all items that don't have an explicit `{@link #cfg!xtype xtype}`:\n\n     defaultType: 'textfield',\n     items: [\n         { fieldLabel: 'Foo' },\n         { fieldLabel: 'Bar' },\n         { fieldLabel: 'Num', xtype: 'numberfield' }\n     ]\n\nEach member of the `items` array is now just a \"configuration object\". These objects\nare used to create and configure component instances. A configuration object can be\nmanually used to instantiate a component using {@link Ext#widget}:\n\n     var text1 = Ext.create('Ext.form.field.Text', {\n         fieldLabel: 'Foo'\n     });\n\n     // or alternatively:\n\n     var text1 = Ext.widget({\n         xtype: 'textfield',\n         fieldLabel: 'Foo'\n     });\n\nThis conversion of configuration objects into instantiated components is done when\na container is created as part of its {Ext.container.AbstractContainer#initComponent}\nprocess. As part of the same process, the `items` array is converted from its raw\narray form into a {@link Ext.util.MixedCollection} instance.\n\nYou can define your own `{@link #cfg!xtype xtype}` on a custom {@link Ext.Component component} by specifying\nthe `{@link #cfg!xtype xtype}` property in {@link Ext#define}. For example:\n\n    Ext.define('MyApp.PressMeButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'pressmebutton',\n        text: 'Press Me'\n    });\n\nCare should be taken when naming an `{@link #cfg!xtype xtype}` in a custom component because there is\na single, shared scope for all xtypes. Third part components should consider using\na prefix to avoid collisions.\n\n    Ext.define('Foo.form.CoolButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'ux-coolbutton',\n        text: 'Cool!'\n    });\n\nSee {@link Ext.enums.Widget} for list of all available xtypes.\n"
    }
  ],
  "methods": [
    {
      "name": "_addDeclaredListeners",
      "returnType": "Array",
      "params": [
        {
          "name": "listeners",
          "type": "Array"
        }
      ]
    },
    {
      "name": "_fixReference"
    },
    {
      "name": "add",
      "returnType": "Ext.Component.../Object.../String.../HTMLElement...",
      "params": [
        {
          "name": "args",
          "type": "Ext.Component.../Object.../String.../HTMLElement..."
        }
      ]
    },
    {
      "name": "addAfterListener"
    },
    {
      "name": "addBeforeListener"
    },
    {
      "name": "addChildEl",
      "params": [
        {
          "name": "childEl"
        }
      ]
    },
    {
      "name": "addClass",
      "returnType": "String/String[]",
      "params": [
        {
          "name": "cls",
          "type": "String/String[]"
        }
      ]
    },
    {
      "name": "addCls",
      "returnType": "String/String[]",
      "params": [
        {
          "name": "cls",
          "type": "String/String[]"
        }
      ]
    },
    {
      "name": "addClsWithUI",
      "params": [
        {
          "name": "classes",
          "type": "String/String[]"
        },
        {
          "name": "skip",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "addDelegatedListener",
      "params": [
        {
          "name": "eventName"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        },
        {
          "name": "options"
        },
        {
          "name": "order"
        },
        {
          "name": "caller"
        },
        {
          "name": "manager"
        }
      ]
    },
    {
      "name": "addDeprecations",
      "params": [
        {
          "name": "deprecations"
        }
      ]
    },
    {
      "name": "addListener",
      "params": [
        {
          "name": "eventName",
          "type": "String/Object"
        },
        {
          "name": "fn",
          "type": "Function/String"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "options",
          "type": "Object"
        },
        {
          "name": "order",
          "type": "String"
        },
        {
          "name": "caller"
        }
      ]
    },
    {
      "name": "addManagedListener",
      "returnType": "Boolean",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element"
        },
        {
          "name": "ename",
          "type": "Object/String"
        },
        {
          "name": "fn",
          "type": "Function/String"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "options",
          "type": "Object"
        },
        {
          "name": "noDestroy",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "addPlugin",
      "params": [
        {
          "name": "plugin"
        }
      ]
    },
    {
      "name": "addPropertyToState",
      "returnType": "String",
      "params": [
        {
          "name": "state",
          "type": "Object"
        },
        {
          "name": "propName",
          "type": "String"
        },
        {
          "name": "value",
          "type": "String"
        }
      ]
    },
    {
      "name": "addStateEvents",
      "params": [
        {
          "name": "events",
          "type": "String/String[]"
        }
      ]
    },
    {
      "name": "addUIClsToElement",
      "params": [
        {
          "name": "uiCls",
          "type": "String"
        }
      ]
    },
    {
      "name": "addUIToElement"
    },
    {
      "name": "adjustForConstraints",
      "params": [
        {
          "name": "xy"
        },
        {
          "name": "parent"
        }
      ]
    },
    {
      "name": "adjustPosition",
      "params": [
        {
          "name": "x"
        },
        {
          "name": "y"
        }
      ]
    },
    {
      "name": "afterClassMixedIn",
      "params": [
        {
          "name": "targetClass",
          "type": "Ext.Class"
        }
      ]
    },
    {
      "name": "afterComponentLayout",
      "params": [
        {
          "name": "width",
          "type": "Number"
        },
        {
          "name": "height",
          "type": "Number"
        },
        {
          "name": "oldWidth",
          "type": "Number/undefined"
        },
        {
          "name": "oldHeight",
          "type": "Number/undefined"
        }
      ]
    },
    {
      "name": "afterHide",
      "params": [
        {
          "name": "callback",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "afterLayout",
      "params": [
        {
          "name": "layout",
          "type": "Ext.layout.container.Container"
        }
      ]
    },
    {
      "name": "afterRender"
    },
    {
      "name": "afterSetPosition",
      "params": [
        {
          "name": "x",
          "type": "Number"
        },
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "afterShow",
      "params": [
        {
          "name": "animateTarget",
          "type": "String/Ext.dom.Element"
        },
        {
          "name": "callback",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "alignTo",
      "returnType": "Boolean",
      "params": [
        {
          "name": "element",
          "type": "Ext.util.Positionable/HTMLElement/String"
        },
        {
          "name": "position",
          "type": "String"
        },
        {
          "name": "offsets",
          "type": "Number[]"
        },
        {
          "name": "animate",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "anchorTo",
      "returnType": "Function",
      "params": [
        {
          "name": "anchorToEl",
          "type": "Ext.util.Positionable/HTMLElement/String"
        },
        {
          "name": "alignment",
          "type": "String"
        },
        {
          "name": "offsets",
          "type": "Number[]"
        },
        {
          "name": "animate",
          "type": "Boolean/Object"
        },
        {
          "name": "monitorScroll",
          "type": "Boolean/Number"
        },
        {
          "name": "callback",
          "type": "Function"
        }
      ]
    },
    {
      "name": "anim",
      "params": [
        {
          "name": "config"
        }
      ]
    },
    {
      "name": "animate",
      "returnType": "Object",
      "params": [
        {
          "name": "animObj",
          "type": "Object"
        }
      ]
    },
    {
      "name": "applyBind",
      "returnType": "Object",
      "params": [
        {
          "name": "binds",
          "type": "String/Object"
        },
        {
          "name": "currentBindings",
          "type": "Object"
        }
      ]
    },
    {
      "name": "applyDefaults",
      "params": [
        {
          "name": "c"
        }
      ]
    },
    {
      "name": "applyRenderSelectors"
    },
    {
      "name": "applySession",
      "returnType": "Object",
      "params": [
        {
          "name": "session",
          "type": "Object"
        }
      ]
    },
    {
      "name": "applyState",
      "params": [
        {
          "name": "state",
          "type": "Object"
        }
      ]
    },
    {
      "name": "applyViewModel",
      "returnType": "String/Object/Ext.app.ViewModel",
      "params": [
        {
          "name": "viewModel",
          "type": "String/Object/Ext.app.ViewModel"
        }
      ]
    },
    {
      "name": "attachChildEls",
      "params": [
        {
          "name": "el"
        },
        {
          "name": "owner"
        }
      ]
    },
    {
      "name": "attachNameRef",
      "params": [
        {
          "name": "component",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "attachReference",
      "params": [
        {
          "name": "component",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "beforeBlur",
      "params": [
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "beforeDestroy"
    },
    {
      "name": "beforeFocus",
      "params": [
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "beforeLayout"
    },
    {
      "name": "beforeLoad"
    },
    {
      "name": "beforeRender"
    },
    {
      "name": "beforeSetPosition",
      "params": [
        {
          "name": "x"
        },
        {
          "name": "y"
        },
        {
          "name": "animate"
        }
      ]
    },
    {
      "name": "beforeShow"
    },
    {
      "name": "bindStore",
      "params": [
        {
          "name": "store",
          "type": "Ext.data.AbstractStore/String"
        },
        {
          "name": "initial"
        },
        {
          "name": "propertyName"
        }
      ]
    },
    {
      "name": "bindStoreListeners",
      "params": [
        {
          "name": "store",
          "type": "Ext.data.AbstractStore"
        }
      ]
    },
    {
      "name": "blur"
    },
    {
      "name": "bubble",
      "returnType": "Array",
      "params": [
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "args",
          "type": "Array"
        }
      ]
    },
    {
      "name": "cacheRefEls",
      "params": [
        {
          "name": "el"
        }
      ]
    },
    {
      "name": "calculateAnchorXY",
      "returnType": "Object",
      "params": [
        {
          "name": "anchor",
          "type": "String"
        },
        {
          "name": "extraX",
          "type": "Number"
        },
        {
          "name": "extraY",
          "type": "Number"
        },
        {
          "name": "size",
          "type": "Object"
        }
      ]
    },
    {
      "name": "calculateConstrainedPosition",
      "returnType": "Number[]",
      "params": [
        {
          "name": "constrainTo",
          "type": "String/HTMLElement/Ext.dom.Element/Ext.util.Region"
        },
        {
          "name": "proposedPosition",
          "type": "Number[]"
        },
        {
          "name": "local",
          "type": "Boolean"
        },
        {
          "name": "proposedSize",
          "type": "Number[]"
        }
      ]
    },
    {
      "name": "callOverridden",
      "returnType": "Array/Arguments",
      "params": [
        {
          "name": "args",
          "type": "Array/Arguments"
        }
      ]
    },
    {
      "name": "callParent",
      "returnType": "Array/Arguments",
      "params": [
        {
          "name": "args",
          "type": "Array/Arguments"
        }
      ]
    },
    {
      "name": "callSuper",
      "returnType": "Array/Arguments",
      "params": [
        {
          "name": "args",
          "type": "Array/Arguments"
        }
      ]
    },
    {
      "name": "cancelFocus"
    },
    {
      "name": "cascade",
      "returnType": "Array",
      "params": [
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "origArgs",
          "type": "Array"
        }
      ]
    },
    {
      "name": "center",
      "returnType": "Array",
      "params": []
    },
    {
      "name": "changeConstraint",
      "params": [
        {
          "name": "newValue"
        },
        {
          "name": "oldValue"
        },
        {
          "name": "constrainMethod"
        },
        {
          "name": "styleName"
        },
        {
          "name": "sizeName"
        }
      ]
    },
    {
      "name": "child",
      "returnType": "String/Ext.Component",
      "params": [
        {
          "name": "selector",
          "type": "String/Ext.Component"
        }
      ]
    },
    {
      "name": "clearClip"
    },
    {
      "name": "clearDelegatedListeners"
    },
    {
      "name": "clearListeners"
    },
    {
      "name": "clearManagedListeners"
    },
    {
      "name": "clipTo",
      "params": [
        {
          "name": "clippingEl",
          "type": "Ext.Component/Ext.Element/Ext.util.Region"
        },
        {
          "name": "sides",
          "type": "Number"
        }
      ]
    },
    {
      "name": "clipToScroller",
      "params": [
        {
          "name": "scroller"
        }
      ]
    },
    {
      "name": "cloneConfig",
      "returnType": "Object",
      "params": [
        {
          "name": "overrides",
          "type": "Object"
        }
      ]
    },
    {
      "name": "constrainBox",
      "params": [
        {
          "name": "box"
        }
      ]
    },
    {
      "name": "constructor",
      "params": [
        {
          "name": "config",
          "type": "Object/Object[]"
        }
      ]
    },
    {
      "name": "constructPlugin",
      "params": [
        {
          "name": "plugin",
          "type": "String/Object"
        }
      ]
    },
    {
      "name": "constructPlugins"
    },
    {
      "name": "contains",
      "returnType": "Boolean",
      "params": [
        {
          "name": "comp",
          "type": "Ext.Component"
        },
        {
          "name": "deep",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "convertPositionSpec",
      "params": [
        {
          "name": "posSpec"
        }
      ]
    },
    {
      "name": "createRelayer",
      "returnType": "Array",
      "params": [
        {
          "name": "newName",
          "type": "String"
        },
        {
          "name": "beginEnd",
          "type": "Array"
        }
      ]
    },
    {
      "name": "destroy"
    },
    {
      "name": "destroyMembers",
      "params": [
        {
          "name": "args",
          "type": "String..."
        }
      ]
    },
    {
      "name": "disable",
      "params": [
        {
          "name": "silent"
        },
        {
          "name": "fromParent"
        }
      ]
    },
    {
      "name": "doApplyRenderTpl",
      "params": [
        {
          "name": "out"
        },
        {
          "name": "values"
        }
      ]
    },
    {
      "name": "doAutoRender"
    },
    {
      "name": "doComponentLayout",
      "params": []
    },
    {
      "name": "doConstrain",
      "params": [
        {
          "name": "constrainTo",
          "type": "String/HTMLElement/Ext.dom.Element/Ext.util.Region"
        }
      ]
    },
    {
      "name": "doDestroy"
    },
    {
      "name": "doFireDelegatedEvent",
      "params": [
        {
          "name": "eventName"
        },
        {
          "name": "args"
        }
      ]
    },
    {
      "name": "doFireEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        },
        {
          "name": "args",
          "type": "Array"
        },
        {
          "name": "bubbles",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "doRefresh",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "doRemove",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "flags"
        }
      ]
    },
    {
      "name": "down",
      "returnType": "String/Ext.Component",
      "params": [
        {
          "name": "selector",
          "type": "String/Ext.Component"
        }
      ]
    },
    {
      "name": "enable",
      "params": [
        {
          "name": "silent"
        },
        {
          "name": "fromParent"
        }
      ]
    },
    {
      "name": "enableBubble",
      "params": [
        {
          "name": "eventNames",
          "type": "String/String[]"
        }
      ]
    },
    {
      "name": "ensureAttachedToBody",
      "params": [
        {
          "name": "runLayout",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "findFocusTarget",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "findParentBy",
      "returnType": "Function",
      "params": [
        {
          "name": "fn",
          "type": "Function"
        }
      ]
    },
    {
      "name": "findParentByType",
      "returnType": "String/Ext.Class",
      "params": [
        {
          "name": "xtype",
          "type": "String/Ext.Class"
        }
      ]
    },
    {
      "name": "findPlugin",
      "returnType": "String",
      "params": [
        {
          "name": "ptype",
          "type": "String"
        }
      ]
    },
    {
      "name": "finishRender",
      "params": [
        {
          "name": "containerIdx",
          "type": "Number"
        }
      ]
    },
    {
      "name": "fireAction",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        },
        {
          "name": "args",
          "type": "Array"
        },
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "options",
          "type": "Object"
        },
        {
          "name": "order",
          "type": "String"
        }
      ]
    },
    {
      "name": "fireEvent",
      "returnType": "Object...",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        },
        {
          "name": "args",
          "type": "Object..."
        }
      ]
    },
    {
      "name": "fireEventArgs",
      "returnType": "Object[]",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        },
        {
          "name": "args",
          "type": "Object[]"
        }
      ]
    },
    {
      "name": "fireEventedAction",
      "returnType": "Array/Boolean",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        },
        {
          "name": "args",
          "type": "Array"
        },
        {
          "name": "fn",
          "type": "Function/String"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "fnArgs",
          "type": "Array/Boolean"
        }
      ]
    },
    {
      "name": "fireHierarchyEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        }
      ]
    },
    {
      "name": "fitContainer",
      "params": [
        {
          "name": "animate"
        }
      ]
    },
    {
      "name": "focus",
      "returnType": "Boolean/Number[]",
      "params": [
        {
          "name": "selectText",
          "type": "Boolean/Number[]"
        }
      ]
    },
    {
      "name": "forceComponentLayout",
      "params": [
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "getAction",
      "params": [
        {
          "name": "name"
        }
      ]
    },
    {
      "name": "getActiveAnimation",
      "params": []
    },
    {
      "name": "getAlignToXY",
      "returnType": "Number[]",
      "params": [
        {
          "name": "alignToEl",
          "type": "Ext.util.Positionable/HTMLElement/String"
        },
        {
          "name": "position",
          "type": "String"
        },
        {
          "name": "offsets",
          "type": "Number[]"
        }
      ]
    },
    {
      "name": "getAnchorToXY",
      "returnType": "Object",
      "params": [
        {
          "name": "el",
          "type": "Ext.dom.Element"
        },
        {
          "name": "anchor",
          "type": "String"
        },
        {
          "name": "local",
          "type": "Boolean"
        },
        {
          "name": "size",
          "type": "Object"
        }
      ]
    },
    {
      "name": "getAnchorXY",
      "returnType": "Object",
      "params": [
        {
          "name": "anchor",
          "type": "String"
        },
        {
          "name": "local",
          "type": "Boolean"
        },
        {
          "name": "size",
          "type": "Object"
        }
      ]
    },
    {
      "name": "getAnimationProps"
    },
    {
      "name": "getAriaLabelEl",
      "returnType": "Function/String/String[]",
      "params": [
        {
          "name": "reference",
          "type": "Function/String/String[]"
        }
      ]
    },
    {
      "name": "getAutoId"
    },
    {
      "name": "getBorderPadding",
      "returnType": "Function/String/String[]",
      "params": []
    },
    {
      "name": "getBox",
      "returnType": "Boolean",
      "params": [
        {
          "name": "contentBox",
          "type": "Boolean"
        },
        {
          "name": "local",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "getBubbleParent",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "getBubbleTarget"
    },
    {
      "name": "getChildByElement",
      "returnType": "Boolean",
      "params": [
        {
          "name": "el",
          "type": "Ext.dom.Element/HTMLElement/String"
        },
        {
          "name": "deep",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "getChildItemsToDisable",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "getClientRegion",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "getComponent",
      "returnType": "String/Number",
      "params": [
        {
          "name": "comp",
          "type": "String/Number"
        }
      ]
    },
    {
      "name": "getConfig",
      "returnType": "Boolean",
      "params": [
        {
          "name": "name",
          "type": "String"
        },
        {
          "name": "peek",
          "type": "Boolean"
        },
        {
          "name": "ifInitialized",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "getConstrainRegion",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "getConstrainVector",
      "returnType": "Number[]",
      "params": [
        {
          "name": "constrainTo",
          "type": "Ext.util.Positionable/HTMLElement/String/Ext.util.Region"
        },
        {
          "name": "proposedPosition",
          "type": "Number[]"
        },
        {
          "name": "proposedSize",
          "type": "Number[]"
        }
      ]
    },
    {
      "name": "getContentTarget"
    },
    {
      "name": "getController",
      "returnType": "Number[]",
      "params": []
    },
    {
      "name": "getCurrentConfig"
    },
    {
      "name": "getDefaultContentTarget"
    },
    {
      "name": "getDefaultFocus"
    },
    {
      "name": "getEl",
      "returnType": "Number[]",
      "params": []
    },
    {
      "name": "getFocusClsEl",
      "returnType": "Ext.dom.Element",
      "params": [
        {
          "name": "focusEl",
          "type": "Ext.dom.Element"
        }
      ]
    },
    {
      "name": "getFocusEl",
      "returnType": "Ext.dom.Element",
      "params": []
    },
    {
      "name": "getFocusTask"
    },
    {
      "name": "getFrameInfo",
      "returnType": "Ext.dom.Element",
      "params": []
    },
    {
      "name": "getFrameTpl",
      "params": [
        {
          "name": "table"
        }
      ]
    },
    {
      "name": "getHeight",
      "params": []
    },
    {
      "name": "getId",
      "params": []
    },
    {
      "name": "getInherited",
      "returnType": "Boolean",
      "params": [
        {
          "name": "inner",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "getInheritedConfig",
      "returnType": "Boolean",
      "params": [
        {
          "name": "property",
          "type": "String"
        },
        {
          "name": "skipThis",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "getInitialConfig",
      "returnType": "String",
      "params": [
        {
          "name": "name",
          "type": "String"
        }
      ]
    },
    {
      "name": "getInsertPosition",
      "returnType": "String/Number/Ext.dom.Element/HTMLElement",
      "params": [
        {
          "name": "position",
          "type": "String/Number/Ext.dom.Element/HTMLElement"
        }
      ]
    },
    {
      "name": "getItemId",
      "returnType": "String/Number/Ext.dom.Element/HTMLElement",
      "params": []
    },
    {
      "name": "getLayout",
      "returnType": "String/Number/Ext.dom.Element/HTMLElement",
      "params": []
    },
    {
      "name": "getLoader",
      "returnType": "String/Number/Ext.dom.Element/HTMLElement",
      "params": []
    },
    {
      "name": "getLocalX",
      "returnType": "String/Number/Ext.dom.Element/HTMLElement",
      "params": []
    },
    {
      "name": "getLocalXY",
      "returnType": "String/Number/Ext.dom.Element/HTMLElement",
      "params": []
    },
    {
      "name": "getLocalY",
      "returnType": "String/Number/Ext.dom.Element/HTMLElement",
      "params": []
    },
    {
      "name": "getMaskTarget"
    },
    {
      "name": "getNamedItems",
      "returnType": "String/Number/Ext.dom.Element/HTMLElement",
      "params": []
    },
    {
      "name": "getOffsetsTo",
      "returnType": "Ext.util.Positionable/HTMLElement/String",
      "params": [
        {
          "name": "offsetsTo",
          "type": "Ext.util.Positionable/HTMLElement/String"
        }
      ]
    },
    {
      "name": "getOverflowEl"
    },
    {
      "name": "getOverflowStyle"
    },
    {
      "name": "getPageData"
    },
    {
      "name": "getPagingItems"
    },
    {
      "name": "getPlugin",
      "returnType": "String",
      "params": [
        {
          "name": "id",
          "type": "String"
        }
      ]
    },
    {
      "name": "getPlugins"
    },
    {
      "name": "getPosition",
      "returnType": "Boolean",
      "params": [
        {
          "name": "local",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "getReferences",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "getRefItems",
      "params": [
        {
          "name": "deep"
        }
      ]
    },
    {
      "name": "getRefOwner"
    },
    {
      "name": "getRegion",
      "returnType": "Boolean",
      "params": [
        {
          "name": "contentBox",
          "type": "Boolean"
        },
        {
          "name": "local",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "getScrollableClientRegion",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "getScrollX",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "getScrollY",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "getSize",
      "returnType": "Boolean",
      "params": [
        {
          "name": "contentSize",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "getSizeModel",
      "returnType": "Boolean",
      "params": [
        {
          "name": "ownerCtSizeModel"
        }
      ]
    },
    {
      "name": "getState",
      "params": []
    },
    {
      "name": "getStateId",
      "params": []
    },
    {
      "name": "getStore",
      "params": []
    },
    {
      "name": "getStoreListeners",
      "returnType": "Ext.data.Store",
      "params": [
        {
          "name": "store",
          "type": "Ext.data.Store"
        }
      ]
    },
    {
      "name": "getStyleProxy",
      "params": [
        {
          "name": "cls"
        }
      ]
    },
    {
      "name": "getTabIndex",
      "params": []
    },
    {
      "name": "getTargetEl"
    },
    {
      "name": "getTdCls"
    },
    {
      "name": "getTdType"
    },
    {
      "name": "getTopAlignTarget",
      "params": []
    },
    {
      "name": "getTpl",
      "params": [
        {
          "name": "name"
        }
      ]
    },
    {
      "name": "getViewRegion",
      "params": []
    },
    {
      "name": "getWidth",
      "params": []
    },
    {
      "name": "getX",
      "params": []
    },
    {
      "name": "getXType",
      "params": []
    },
    {
      "name": "getXTypes",
      "params": []
    },
    {
      "name": "getXY",
      "params": []
    },
    {
      "name": "getY",
      "params": []
    },
    {
      "name": "handleBlurEvent",
      "params": [
        {
          "name": "info"
        }
      ]
    },
    {
      "name": "handleFocusEvent",
      "params": [
        {
          "name": "info"
        }
      ]
    },
    {
      "name": "hasActiveFx",
      "params": []
    },
    {
      "name": "hasCls",
      "returnType": "String",
      "params": [
        {
          "name": "className",
          "type": "String"
        }
      ]
    },
    {
      "name": "hasConfig",
      "params": [
        {
          "name": "name",
          "type": "String"
        }
      ]
    },
    {
      "name": "hasListener",
      "returnType": "String",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        }
      ]
    },
    {
      "name": "hasUICls",
      "params": [
        {
          "name": "cls",
          "type": "String"
        }
      ]
    },
    {
      "name": "hide",
      "returnType": "Object",
      "params": [
        {
          "name": "animateTarget",
          "type": "String/Ext.dom.Element/Ext.Component"
        },
        {
          "name": "callback",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "initBindable"
    },
    {
      "name": "initComponent"
    },
    {
      "name": "initConfig",
      "returnType": "Object",
      "params": [
        {
          "name": "instanceConfig",
          "type": "Object"
        }
      ]
    },
    {
      "name": "initEvents"
    },
    {
      "name": "initFocusableElement",
      "params": [
        {
          "name": "force"
        }
      ]
    },
    {
      "name": "initFocusableEvents",
      "params": [
        {
          "name": "force"
        }
      ]
    },
    {
      "name": "initInheritedState",
      "params": [
        {
          "name": "inheritedState"
        },
        {
          "name": "inheritedStateInner"
        }
      ]
    },
    {
      "name": "initItems"
    },
    {
      "name": "initKeyMap"
    },
    {
      "name": "initPadding",
      "params": [
        {
          "name": "targetEl"
        }
      ]
    },
    {
      "name": "initPlugin",
      "params": [
        {
          "name": "plugin"
        }
      ]
    },
    {
      "name": "initRenderData",
      "params": []
    },
    {
      "name": "initRenderTpl",
      "params": []
    },
    {
      "name": "initState"
    },
    {
      "name": "initStyles",
      "params": [
        {
          "name": "targetEl"
        }
      ]
    },
    {
      "name": "insert",
      "returnType": "Ext.Component/Object/String/HTMLElement",
      "params": [
        {
          "name": "index",
          "type": "Number"
        },
        {
          "name": "component",
          "type": "Ext.Component/Object/String/HTMLElement"
        }
      ]
    },
    {
      "name": "invalidateInheritedState"
    },
    {
      "name": "is",
      "returnType": "String",
      "params": [
        {
          "name": "selector",
          "type": "String"
        }
      ]
    },
    {
      "name": "isAncestor",
      "returnType": "Ext.Component",
      "params": [
        {
          "name": "possibleDescendant",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "isBlurring",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "isBound",
      "returnType": "String",
      "params": [
        {
          "name": "name",
          "type": "String"
        }
      ]
    },
    {
      "name": "isDescendantOf",
      "returnType": "Ext.Component",
      "params": [
        {
          "name": "ancestor",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "isDestructing",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "isDisabled",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "isDraggable",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "isDroppable",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "isFloating",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "isFocusable",
      "returnType": "Boolean",
      "params": [
        {
          "name": "deep",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "isFocusing",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "isHidden",
      "params": []
    },
    {
      "name": "isLayoutChild",
      "returnType": "Ext.Component",
      "params": [
        {
          "name": "ownerCandidate",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "isLayoutRoot",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "isLayoutSuspended",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "isMasked",
      "returnType": "Boolean",
      "params": [
        {
          "name": "deep",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "isSuspended",
      "returnType": "String",
      "params": [
        {
          "name": "event",
          "type": "String"
        }
      ]
    },
    {
      "name": "isSyncing",
      "returnType": "String",
      "params": [
        {
          "name": "name",
          "type": "String"
        }
      ]
    },
    {
      "name": "isVisible",
      "returnType": "Boolean",
      "params": [
        {
          "name": "deep",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "isXType",
      "returnType": "Boolean",
      "params": [
        {
          "name": "xtype",
          "type": "String"
        },
        {
          "name": "shallow",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "link",
      "returnType": "Object",
      "params": [
        {
          "name": "name",
          "type": "String"
        },
        {
          "name": "value",
          "type": "Object"
        }
      ]
    },
    {
      "name": "lookup",
      "returnType": "String",
      "params": [
        {
          "name": "ref",
          "type": "String"
        }
      ]
    },
    {
      "name": "lookupComponent",
      "params": [
        {
          "name": "c"
        }
      ]
    },
    {
      "name": "lookupController",
      "returnType": "Boolean",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "lookupName",
      "returnType": "String",
      "params": [
        {
          "name": "name",
          "type": "String"
        }
      ]
    },
    {
      "name": "lookupNameHolder",
      "returnType": "Boolean",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "lookupReference",
      "returnType": "String",
      "params": [
        {
          "name": "ref",
          "type": "String"
        }
      ]
    },
    {
      "name": "lookupReferenceHolder",
      "returnType": "Boolean",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "lookupSession",
      "returnType": "Boolean",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "lookupTpl",
      "returnType": "String",
      "params": [
        {
          "name": "name",
          "type": "String"
        }
      ]
    },
    {
      "name": "lookupViewModel",
      "returnType": "Boolean",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "mask",
      "params": [
        {
          "name": "msg",
          "type": "String"
        },
        {
          "name": "msgCls",
          "type": "String"
        },
        {
          "name": "elHeight",
          "type": "Number"
        }
      ]
    },
    {
      "name": "mon",
      "returnType": "Boolean",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element"
        },
        {
          "name": "ename",
          "type": "Object/String"
        },
        {
          "name": "fn",
          "type": "Function/String"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "options",
          "type": "Object"
        },
        {
          "name": "noDestroy",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "move",
      "returnType": "Number",
      "params": [
        {
          "name": "fromIdx",
          "type": "Number/Ext.Component"
        },
        {
          "name": "toIdx",
          "type": "Number"
        }
      ]
    },
    {
      "name": "moveAfter",
      "returnType": "Ext.Component",
      "params": [
        {
          "name": "item",
          "type": "Ext.Component/Ext.Component[]"
        },
        {
          "name": "after",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "moveBefore",
      "returnType": "Ext.Component",
      "params": [
        {
          "name": "item",
          "type": "Ext.Component/Ext.Component[]"
        },
        {
          "name": "before",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "moveFirst",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "moveFloatingDescendants",
      "params": [
        {
          "name": "item",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "moveLast",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "moveNext",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "movePrevious",
      "returnType": "Ext.Component",
      "params": []
    },
    {
      "name": "mun",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element"
        },
        {
          "name": "ename",
          "type": "Object/String"
        },
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "nextChild",
      "returnType": "String",
      "params": [
        {
          "name": "child",
          "type": "Ext.Component"
        },
        {
          "name": "selector",
          "type": "String"
        }
      ]
    },
    {
      "name": "nextNode",
      "params": [
        {
          "name": "selector",
          "type": "String"
        },
        {
          "name": "includeSelf"
        }
      ]
    },
    {
      "name": "nextSibling",
      "returnType": "String",
      "params": [
        {
          "name": "selector",
          "type": "String"
        }
      ]
    },
    {
      "name": "on",
      "params": [
        {
          "name": "eventName",
          "type": "String/Object"
        },
        {
          "name": "fn",
          "type": "Function/String"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "options",
          "type": "Object"
        },
        {
          "name": "order",
          "type": "String"
        },
        {
          "name": "caller"
        }
      ]
    },
    {
      "name": "onAdd",
      "params": [
        {
          "name": "component",
          "type": "Ext.Component"
        },
        {
          "name": "position",
          "type": "Number"
        }
      ]
    },
    {
      "name": "onAdded",
      "params": [
        {
          "name": "container",
          "type": "Ext.container.Container"
        },
        {
          "name": "pos",
          "type": "Number"
        },
        {
          "name": "instanced",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "onAfter",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object"
        },
        {
          "name": "fn",
          "type": "Function/String"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onBefore",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object"
        },
        {
          "name": "fn",
          "type": "Function/String"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onBeforeAdd",
      "params": [
        {
          "name": "item",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "onBindStore",
      "params": [
        {
          "name": "store",
          "type": "Ext.data.AbstractStore"
        },
        {
          "name": "initial",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "onBlur",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "onBoxReady",
      "params": [
        {
          "name": "width",
          "type": "Number"
        },
        {
          "name": "height",
          "type": "Number"
        }
      ]
    },
    {
      "name": "onButtonMenuHide",
      "params": [
        {
          "name": "btn"
        }
      ]
    },
    {
      "name": "onButtonMenuShow",
      "params": [
        {
          "name": "btn"
        }
      ]
    },
    {
      "name": "onDestroy"
    },
    {
      "name": "onDisable"
    },
    {
      "name": "onEnable"
    },
    {
      "name": "onFocus",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "onFocusEnter",
      "params": [
        {
          "name": "e",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onFocusLeave",
      "params": [
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "onFocusMove",
      "params": [
        {
          "name": "info",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onFocusTopmost"
    },
    {
      "name": "onHide",
      "params": [
        {
          "name": "animateTarget",
          "type": "String/Ext.dom.Element/Ext.Component"
        },
        {
          "name": "callback",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onInheritedAdd",
      "params": [
        {
          "name": "parent"
        },
        {
          "name": "instanced",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "onInheritedRemove",
      "params": [
        {
          "name": "destroying",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "onItemOver",
      "params": [
        {
          "name": "e"
        },
        {
          "name": "target"
        }
      ]
    },
    {
      "name": "onLoad"
    },
    {
      "name": "onLoadError"
    },
    {
      "name": "onMouseDown",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "onPagingBlur",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "onPagingKeyDown",
      "params": [
        {
          "name": "field"
        },
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "onPosition",
      "params": [
        {
          "name": "x",
          "type": "Number"
        },
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "onRemove",
      "params": [
        {
          "name": "component",
          "type": "Ext.Component"
        },
        {
          "name": "isDestroying",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "onRemoved",
      "params": [
        {
          "name": "destroying",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "onRender",
      "params": [
        {
          "name": "parentNode",
          "type": "Ext.dom.Element"
        },
        {
          "name": "containerIdx",
          "type": "Number"
        }
      ]
    },
    {
      "name": "onResize",
      "params": [
        {
          "name": "width",
          "type": "Number"
        },
        {
          "name": "height",
          "type": "Number"
        },
        {
          "name": "oldWidth",
          "type": "Number"
        },
        {
          "name": "oldHeight",
          "type": "Number"
        }
      ]
    },
    {
      "name": "onScrollEnd",
      "params": [
        {
          "name": "x",
          "type": "Number"
        },
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "onScrollMove",
      "params": [
        {
          "name": "x",
          "type": "Number"
        },
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "onScrollStart",
      "params": [
        {
          "name": "x",
          "type": "Number"
        },
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "onShow",
      "params": [
        {
          "name": "animateTarget",
          "type": "String/Ext.dom.Element"
        },
        {
          "name": "callback",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onShowComplete",
      "params": [
        {
          "name": "callback",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onStateChange"
    },
    {
      "name": "onUnbindStore",
      "params": [
        {
          "name": "store",
          "type": "Ext.data.AbstractStore"
        },
        {
          "name": "initial",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "onZIndexChange",
      "params": [
        {
          "name": "isTopMost",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "owns",
      "params": [
        {
          "name": "element"
        }
      ]
    },
    {
      "name": "postBlur",
      "params": [
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "postFocus",
      "params": [
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "prepareItems",
      "params": [
        {
          "name": "items"
        },
        {
          "name": "applyDefaults"
        }
      ]
    },
    {
      "name": "prevChild",
      "returnType": "String",
      "params": [
        {
          "name": "child",
          "type": "Ext.Component"
        },
        {
          "name": "selector",
          "type": "String"
        }
      ]
    },
    {
      "name": "previousNode",
      "params": [
        {
          "name": "selector",
          "type": "String"
        },
        {
          "name": "includeSelf"
        }
      ]
    },
    {
      "name": "previousSibling",
      "returnType": "String",
      "params": [
        {
          "name": "selector",
          "type": "String"
        }
      ]
    },
    {
      "name": "processFocusableContainerKeyEvent",
      "returnType": "Ext.util.Event",
      "params": [
        {
          "name": "e",
          "type": "Ext.util.Event"
        }
      ]
    },
    {
      "name": "publishState",
      "params": [
        {
          "name": "property",
          "type": "String"
        },
        {
          "name": "value",
          "type": "Object"
        }
      ]
    },
    {
      "name": "query",
      "returnType": "String",
      "params": [
        {
          "name": "selector",
          "type": "String"
        }
      ]
    },
    {
      "name": "queryBy",
      "returnType": "Object",
      "params": [
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "queryById",
      "returnType": "String",
      "params": [
        {
          "name": "id",
          "type": "String"
        }
      ]
    },
    {
      "name": "readPageFromInput",
      "params": [
        {
          "name": "pageData"
        }
      ]
    },
    {
      "name": "registerFloatingItem",
      "params": [
        {
          "name": "cmp"
        }
      ]
    },
    {
      "name": "relayEvents",
      "returnType": "String",
      "params": [
        {
          "name": "origin",
          "type": "Object"
        },
        {
          "name": "events",
          "type": "String[]/Object"
        },
        {
          "name": "prefix",
          "type": "String"
        }
      ]
    },
    {
      "name": "remove",
      "returnType": "Object",
      "params": [
        {
          "name": "component",
          "type": "Ext.Component/String"
        },
        {
          "name": "autoDestroy",
          "type": "Object"
        }
      ]
    },
    {
      "name": "removeAfterListener"
    },
    {
      "name": "removeAll",
      "returnType": "Boolean",
      "params": [
        {
          "name": "autoDestroy",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "removeAnchor",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "removeBeforeListener"
    },
    {
      "name": "removeClass",
      "returnType": "String/String[]",
      "params": [
        {
          "name": "cls",
          "type": "String/String[]"
        }
      ]
    },
    {
      "name": "removeCls",
      "returnType": "String/String[]",
      "params": [
        {
          "name": "cls",
          "type": "String/String[]"
        }
      ]
    },
    {
      "name": "removeClsWithUI",
      "params": [
        {
          "name": "classes",
          "type": "String/String[]"
        },
        {
          "name": "skip",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "removeDelegatedListener",
      "params": [
        {
          "name": "eventName"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        }
      ]
    },
    {
      "name": "removeListener",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        },
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "eventOptions"
        }
      ]
    },
    {
      "name": "removeManagedListener",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element"
        },
        {
          "name": "ename",
          "type": "Object/String"
        },
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "removeManagedListenerItem",
      "params": [
        {
          "name": "isClear",
          "type": "Boolean"
        },
        {
          "name": "managedListener",
          "type": "Object"
        },
        {
          "name": "item",
          "type": "Object"
        },
        {
          "name": "ename",
          "type": "String"
        },
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "removeUIClsFromElement",
      "params": [
        {
          "name": "uiCls",
          "type": "String"
        }
      ]
    },
    {
      "name": "removeUIFromElement"
    },
    {
      "name": "render",
      "params": [
        {
          "name": "container",
          "type": "Ext.dom.Element/HTMLElement/String"
        },
        {
          "name": "position",
          "type": "String/Number"
        }
      ]
    },
    {
      "name": "resolveListenerScope",
      "returnType": "Boolean",
      "params": [
        {
          "name": "defaultScope",
          "type": "Object"
        },
        {
          "name": "skipThis",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "resolveSatelliteListenerScope",
      "returnType": "Object",
      "params": [
        {
          "name": "satellite",
          "type": "Ext.mixin.Observable"
        },
        {
          "name": "defaultScope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "resumeEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String..."
        }
      ]
    },
    {
      "name": "resumeEvents",
      "params": [
        {
          "name": "discardQueue",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "reverseTranslateXY",
      "returnType": "Number[]",
      "params": [
        {
          "name": "xy",
          "type": "Number[]"
        }
      ]
    },
    {
      "name": "revertFocus"
    },
    {
      "name": "revertFocusTo",
      "params": [
        {
          "name": "target"
        }
      ]
    },
    {
      "name": "savePropsToState",
      "returnType": "Object",
      "params": [
        {
          "name": "propNames",
          "type": "String/String[]"
        },
        {
          "name": "state",
          "type": "Object"
        }
      ]
    },
    {
      "name": "savePropToState",
      "returnType": "String",
      "params": [
        {
          "name": "propName",
          "type": "String"
        },
        {
          "name": "state",
          "type": "Object"
        },
        {
          "name": "stateName",
          "type": "String"
        }
      ]
    },
    {
      "name": "saveState"
    },
    {
      "name": "scrollBy",
      "params": [
        {
          "name": "deltaX",
          "type": "Number/Number[]/Object"
        },
        {
          "name": "deltaY",
          "type": "Number/Boolean/Object"
        },
        {
          "name": "animate",
          "type": "Boolean/Object"
        }
      ]
    },
    {
      "name": "scrollTo",
      "params": [
        {
          "name": "x",
          "type": "Number"
        },
        {
          "name": "y",
          "type": "Number"
        },
        {
          "name": "animate",
          "type": "Boolean/Object"
        }
      ]
    },
    {
      "name": "sequenceFx",
      "returnType": "Boolean/Object",
      "params": []
    },
    {
      "name": "setActiveItem",
      "returnType": "Ext.Component/Number/String",
      "params": [
        {
          "name": "item",
          "type": "Ext.Component/Number/String"
        }
      ]
    },
    {
      "name": "setAutoScroll",
      "returnType": "Boolean",
      "params": [
        {
          "name": "scroll",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "setBorder",
      "params": [
        {
          "name": "border",
          "type": "String/Number"
        },
        {
          "name": "targetEl"
        }
      ]
    },
    {
      "name": "setBox",
      "returnType": "Object",
      "params": [
        {
          "name": "box",
          "type": "Object"
        }
      ]
    },
    {
      "name": "setComponentLayout",
      "params": [
        {
          "name": "layout"
        }
      ]
    },
    {
      "name": "setConfig",
      "returnType": "Object",
      "params": [
        {
          "name": "name",
          "type": "String/Object"
        },
        {
          "name": "value",
          "type": "Object"
        },
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "setDisabled",
      "params": [
        {
          "name": "disabled",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "setDock",
      "returnType": "Object",
      "params": [
        {
          "name": "dock",
          "type": "Object"
        }
      ]
    },
    {
      "name": "setDocked",
      "returnType": "Object",
      "params": [
        {
          "name": "dock",
          "type": "Object"
        }
      ]
    },
    {
      "name": "setFlex",
      "params": [
        {
          "name": "flex",
          "type": "Number"
        }
      ]
    },
    {
      "name": "setHeight",
      "returnType": "Number",
      "params": [
        {
          "name": "height",
          "type": "Number"
        }
      ]
    },
    {
      "name": "setHidden",
      "returnType": "Boolean",
      "params": [
        {
          "name": "hidden",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "setHtml",
      "params": [
        {
          "name": "html",
          "type": "String/Object"
        },
        {
          "name": "loadScripts",
          "type": "Boolean"
        },
        {
          "name": "callback",
          "type": "Function"
        },
        {
          "name": "scriptScope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "setLayout",
      "params": [
        {
          "name": "configuration",
          "type": "Object"
        }
      ]
    },
    {
      "name": "setListeners",
      "params": [
        {
          "name": "listeners",
          "type": "Object"
        }
      ]
    },
    {
      "name": "setLoading",
      "params": [
        {
          "name": "load",
          "type": "Boolean/Object/String"
        },
        {
          "name": "targetEl"
        }
      ]
    },
    {
      "name": "setLocalX",
      "returnType": "Number",
      "params": [
        {
          "name": "x",
          "type": "Number"
        }
      ]
    },
    {
      "name": "setLocalXY",
      "returnType": "Number",
      "params": [
        {
          "name": "x",
          "type": "Number/Array"
        },
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "setLocalY",
      "returnType": "Number",
      "params": [
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "setMargin",
      "params": [
        {
          "name": "margin",
          "type": "Number/String"
        },
        {
          "name": "preventLayout"
        }
      ]
    },
    {
      "name": "setMasked",
      "returnType": "Boolean",
      "params": [
        {
          "name": "isMasked",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "setOverflowXY",
      "returnType": "String",
      "params": [
        {
          "name": "overflowX",
          "type": "String"
        },
        {
          "name": "overflowY",
          "type": "String"
        }
      ]
    },
    {
      "name": "setPagePosition",
      "returnType": "Boolean/Object",
      "params": [
        {
          "name": "x",
          "type": "Number/Number[]"
        },
        {
          "name": "y",
          "type": "Number"
        },
        {
          "name": "animate",
          "type": "Boolean/Object"
        }
      ]
    },
    {
      "name": "setPosition",
      "returnType": "Boolean/Object",
      "params": [
        {
          "name": "x",
          "type": "Number/Number[]/Object"
        },
        {
          "name": "y",
          "type": "Number"
        },
        {
          "name": "animate",
          "type": "Boolean/Object"
        }
      ]
    },
    {
      "name": "setScrollX",
      "params": [
        {
          "name": "x",
          "type": "Number"
        },
        {
          "name": "animate",
          "type": "Boolean/Object"
        }
      ]
    },
    {
      "name": "setScrollY",
      "params": [
        {
          "name": "y",
          "type": "Number"
        },
        {
          "name": "animate",
          "type": "Boolean/Object"
        }
      ]
    },
    {
      "name": "setSize",
      "returnType": "Number/String",
      "params": [
        {
          "name": "width",
          "type": "Number/String/Object"
        },
        {
          "name": "height",
          "type": "Number/String"
        }
      ]
    },
    {
      "name": "setStore",
      "params": [
        {
          "name": "store"
        }
      ]
    },
    {
      "name": "setStyle",
      "returnType": "String",
      "params": [
        {
          "name": "property",
          "type": "String/Object"
        },
        {
          "name": "value",
          "type": "String"
        }
      ]
    },
    {
      "name": "setTabIndex",
      "params": [
        {
          "name": "newTabIndex",
          "type": "Number"
        },
        {
          "name": "focusEl",
          "type": "HTMLElement"
        }
      ]
    },
    {
      "name": "setUI",
      "params": [
        {
          "name": "ui",
          "type": "String"
        }
      ]
    },
    {
      "name": "setupFramingTpl",
      "params": [
        {
          "name": "frameTpl"
        }
      ]
    },
    {
      "name": "setVisible",
      "returnType": "Boolean",
      "params": [
        {
          "name": "visible",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "setWidth",
      "returnType": "Number",
      "params": [
        {
          "name": "width",
          "type": "Number"
        }
      ]
    },
    {
      "name": "setX",
      "returnType": "Number",
      "params": [
        {
          "name": "x",
          "type": "Number"
        }
      ]
    },
    {
      "name": "setXY",
      "returnType": "Number[]",
      "params": [
        {
          "name": "pos",
          "type": "Number[]"
        }
      ]
    },
    {
      "name": "setY",
      "returnType": "Number",
      "params": [
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "setZIndex",
      "params": [
        {
          "name": "index"
        }
      ]
    },
    {
      "name": "show",
      "returnType": "Object",
      "params": [
        {
          "name": "animateTarget",
          "type": "String/Ext.dom.Element"
        },
        {
          "name": "callback",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "showAt",
      "returnType": "Boolean/Object",
      "params": [
        {
          "name": "x",
          "type": "Number/Number[]"
        },
        {
          "name": "y",
          "type": "Number"
        },
        {
          "name": "animate",
          "type": "Boolean/Object"
        }
      ]
    },
    {
      "name": "showBy",
      "returnType": "Number[]",
      "params": [
        {
          "name": "component",
          "type": "Ext.Component/Ext.dom.Element"
        },
        {
          "name": "position",
          "type": "String"
        },
        {
          "name": "offset",
          "type": "Number[]"
        }
      ]
    },
    {
      "name": "statics",
      "returnType": "Number[]",
      "params": []
    },
    {
      "name": "stopAnimation",
      "returnType": "Boolean",
      "params": [
        {
          "name": "suppressEvent",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "stopFx",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "suspendEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String..."
        }
      ]
    },
    {
      "name": "suspendEvents",
      "params": [
        {
          "name": "queueSuspended",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "syncFx",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "syncHidden"
    },
    {
      "name": "toBack",
      "returnType": "Boolean",
      "params": []
    },
    {
      "name": "toFront",
      "returnType": "Boolean",
      "params": [
        {
          "name": "preventFocus",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "toggleCls",
      "returnType": "Boolean",
      "params": [
        {
          "name": "className",
          "type": "String"
        },
        {
          "name": "state",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "trackMenu",
      "params": [
        {
          "name": "item"
        },
        {
          "name": "remove"
        }
      ]
    },
    {
      "name": "translatePoints",
      "returnType": "Number",
      "params": [
        {
          "name": "x",
          "type": "Number/Array"
        },
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "translateXY",
      "returnType": "Number",
      "params": [
        {
          "name": "x",
          "type": "Number/Array"
        },
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "un",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        },
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "eventOptions"
        }
      ]
    },
    {
      "name": "unAfter",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object"
        },
        {
          "name": "fn",
          "type": "Function/String"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "unBefore",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object"
        },
        {
          "name": "fn",
          "type": "Function/String"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "unbindStoreListeners",
      "params": [
        {
          "name": "store",
          "type": "Ext.data.AbstractStore"
        }
      ]
    },
    {
      "name": "unlink",
      "returnType": "String[]",
      "params": [
        {
          "name": "names",
          "type": "String[]"
        }
      ]
    },
    {
      "name": "unmask"
    },
    {
      "name": "up",
      "returnType": "String/Number/Ext.Component",
      "params": [
        {
          "name": "selector",
          "type": "String/Ext.Component"
        },
        {
          "name": "limit",
          "type": "String/Number/Ext.Component"
        }
      ]
    },
    {
      "name": "update",
      "params": [
        {
          "name": "htmlOrData",
          "type": "String/Object"
        },
        {
          "name": "loadScripts",
          "type": "Boolean"
        },
        {
          "name": "callback",
          "type": "Function"
        },
        {
          "name": "scriptScope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "updateBox",
      "returnType": "Object",
      "params": [
        {
          "name": "box",
          "type": "Object"
        }
      ]
    },
    {
      "name": "updateFrame"
    },
    {
      "name": "updateInfo"
    },
    {
      "name": "updateLayout",
      "params": [
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "updateSession",
      "params": [
        {
          "name": "session",
          "type": "Ext.data.Session"
        }
      ]
    },
    {
      "name": "updateViewModel",
      "params": [
        {
          "name": "viewModel",
          "type": "Ext.app.ViewModel"
        },
        {
          "name": "oldViewModel",
          "type": "Ext.app.ViewModel"
        }
      ]
    },
    {
      "name": "visitPostOrder",
      "params": [
        {
          "name": "selector",
          "type": "Object"
        },
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "extraArgs",
          "type": "Array"
        }
      ]
    },
    {
      "name": "visitPreOrder",
      "params": [
        {
          "name": "selector",
          "type": "Object"
        },
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object"
        },
        {
          "name": "extraArgs",
          "type": "Array"
        }
      ]
    },
    {
      "name": "watchConfig",
      "params": [
        {
          "name": "name"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        }
      ]
    }
  ],
  "events": [
    {
      "name": "activate",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "add",
      "params": [
        {
          "name": "this",
          "type": "Ext.container.Container"
        },
        {
          "name": "component",
          "type": "Ext.Component"
        },
        {
          "name": "index",
          "type": "Number"
        }
      ]
    },
    {
      "name": "added",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "container",
          "type": "Ext.container.Container"
        },
        {
          "name": "pos",
          "type": "Number"
        }
      ]
    },
    {
      "name": "afterlayout",
      "params": [
        {
          "name": "this",
          "type": "Ext.container.Container"
        },
        {
          "name": "layout",
          "type": "Ext.layout.container.Container"
        }
      ]
    },
    {
      "name": "afterlayoutanimation",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "afterrender",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "beforeactivate",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "beforeadd",
      "params": [
        {
          "name": "this",
          "type": "Ext.container.Container"
        },
        {
          "name": "component",
          "type": "Ext.Component"
        },
        {
          "name": "index",
          "type": "Number"
        }
      ]
    },
    {
      "name": "beforechange",
      "params": [
        {
          "name": "this",
          "type": "Ext.toolbar.Paging"
        },
        {
          "name": "page",
          "type": "Number"
        }
      ]
    },
    {
      "name": "beforedeactivate",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "beforedestroy",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "beforehide",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "beforeremove",
      "params": [
        {
          "name": "this",
          "type": "Ext.container.Container"
        },
        {
          "name": "component",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "beforerender",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "beforeshow",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "beforestaterestore",
      "params": [
        {
          "name": "this",
          "type": "Ext.state.Stateful"
        },
        {
          "name": "state",
          "type": "Object"
        }
      ]
    },
    {
      "name": "beforestatesave",
      "params": [
        {
          "name": "this",
          "type": "Ext.state.Stateful"
        },
        {
          "name": "state",
          "type": "Object"
        }
      ]
    },
    {
      "name": "blur",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "event",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "boxready",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "width",
          "type": "Number"
        },
        {
          "name": "height",
          "type": "Number"
        }
      ]
    },
    {
      "name": "change",
      "params": [
        {
          "name": "this",
          "type": "Ext.toolbar.Paging"
        },
        {
          "name": "pageData",
          "type": "Object"
        }
      ]
    },
    {
      "name": "childmove",
      "params": [
        {
          "name": "this",
          "type": "Ext.container.Container"
        },
        {
          "name": "component",
          "type": "Ext.Component"
        },
        {
          "name": "prevIndex",
          "type": "Number"
        },
        {
          "name": "newIndex",
          "type": "Number"
        }
      ]
    },
    {
      "name": "deactivate",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "destroy",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "disable",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "enable",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "focus",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component/Ext.Widget"
        },
        {
          "name": "event",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "focusenter",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "event",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "focusleave",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "event",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "hide",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "move",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "x",
          "type": "Number"
        },
        {
          "name": "y",
          "type": "Number"
        }
      ]
    },
    {
      "name": "overflowchange",
      "params": [
        {
          "name": "lastHiddenCount",
          "type": "Number"
        },
        {
          "name": "hiddenCount",
          "type": "Number"
        },
        {
          "name": "hiddenItems",
          "type": "Array"
        }
      ]
    },
    {
      "name": "remove",
      "params": [
        {
          "name": "this",
          "type": "Ext.container.Container"
        },
        {
          "name": "component",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "removed",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "ownerCt",
          "type": "Ext.container.Container"
        }
      ]
    },
    {
      "name": "render",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "resize",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "width",
          "type": "Number"
        },
        {
          "name": "height",
          "type": "Number"
        },
        {
          "name": "oldWidth",
          "type": "Number"
        },
        {
          "name": "oldHeight",
          "type": "Number"
        }
      ]
    },
    {
      "name": "show",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "staterestore",
      "params": [
        {
          "name": "this",
          "type": "Ext.state.Stateful"
        },
        {
          "name": "state",
          "type": "Object"
        }
      ]
    },
    {
      "name": "statesave",
      "params": [
        {
          "name": "this",
          "type": "Ext.state.Stateful"
        },
        {
          "name": "state",
          "type": "Object"
        }
      ]
    }
  ]
}